{"ast":null,"code":"import $fnFM9$babelruntimehelpersesmextends from \"@babel/runtime/helpers/esm/extends\";\nimport { forwardRef as $fnFM9$forwardRef, useState as $fnFM9$useState, createElement as $fnFM9$createElement, useRef as $fnFM9$useRef, Fragment as $fnFM9$Fragment, useEffect as $fnFM9$useEffect, useCallback as $fnFM9$useCallback, useReducer as $fnFM9$useReducer } from \"react\";\nimport { Primitive as $fnFM9$Primitive } from \"@radix-ui/react-primitive\";\nimport { Presence as $fnFM9$Presence } from \"@radix-ui/react-presence\";\nimport { createContextScope as $fnFM9$createContextScope } from \"@radix-ui/react-context\";\nimport { useComposedRefs as $fnFM9$useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport { useCallbackRef as $fnFM9$useCallbackRef } from \"@radix-ui/react-use-callback-ref\";\nimport { useDirection as $fnFM9$useDirection } from \"@radix-ui/react-direction\";\nimport { useLayoutEffect as $fnFM9$useLayoutEffect } from \"@radix-ui/react-use-layout-effect\";\nimport { clamp as $fnFM9$clamp } from \"@radix-ui/number\";\nimport { composeEventHandlers as $fnFM9$composeEventHandlers } from \"@radix-ui/primitive\";\n\nfunction $6c2e24571c90391f$export$3e6543de14f8614f(initialState, machine) {\n  return $fnFM9$useReducer((state, event) => {\n    const nextState = machine[state][event];\n    return nextState !== null && nextState !== void 0 ? nextState : state;\n  }, initialState);\n}\n/* -------------------------------------------------------------------------------------------------\n * ScrollArea\n * -----------------------------------------------------------------------------------------------*/\n\n\nconst $57acba87d6e25586$var$SCROLL_AREA_NAME = 'ScrollArea';\nconst [$57acba87d6e25586$var$createScrollAreaContext, $57acba87d6e25586$export$488468afe3a6f2b1] = $fnFM9$createContextScope($57acba87d6e25586$var$SCROLL_AREA_NAME);\nconst [$57acba87d6e25586$var$ScrollAreaProvider, $57acba87d6e25586$var$useScrollAreaContext] = $57acba87d6e25586$var$createScrollAreaContext($57acba87d6e25586$var$SCROLL_AREA_NAME);\nconst $57acba87d6e25586$export$ccf8d8d7bbf3c2cc = /*#__PURE__*/$fnFM9$forwardRef((props, forwardedRef) => {\n  const {\n    __scopeScrollArea: __scopeScrollArea,\n    type = 'hover',\n    dir: dir,\n    scrollHideDelay = 600,\n    ...scrollAreaProps\n  } = props;\n  const [scrollArea, setScrollArea] = $fnFM9$useState(null);\n  const [viewport, setViewport] = $fnFM9$useState(null);\n  const [content, setContent] = $fnFM9$useState(null);\n  const [scrollbarX, setScrollbarX] = $fnFM9$useState(null);\n  const [scrollbarY, setScrollbarY] = $fnFM9$useState(null);\n  const [cornerWidth, setCornerWidth] = $fnFM9$useState(0);\n  const [cornerHeight, setCornerHeight] = $fnFM9$useState(0);\n  const [scrollbarXEnabled, setScrollbarXEnabled] = $fnFM9$useState(false);\n  const [scrollbarYEnabled, setScrollbarYEnabled] = $fnFM9$useState(false);\n  const composedRefs = $fnFM9$useComposedRefs(forwardedRef, node => setScrollArea(node));\n  const direction = $fnFM9$useDirection(dir);\n  return /*#__PURE__*/$fnFM9$createElement($57acba87d6e25586$var$ScrollAreaProvider, {\n    scope: __scopeScrollArea,\n    type: type,\n    dir: direction,\n    scrollHideDelay: scrollHideDelay,\n    scrollArea: scrollArea,\n    viewport: viewport,\n    onViewportChange: setViewport,\n    content: content,\n    onContentChange: setContent,\n    scrollbarX: scrollbarX,\n    onScrollbarXChange: setScrollbarX,\n    scrollbarXEnabled: scrollbarXEnabled,\n    onScrollbarXEnabledChange: setScrollbarXEnabled,\n    scrollbarY: scrollbarY,\n    onScrollbarYChange: setScrollbarY,\n    scrollbarYEnabled: scrollbarYEnabled,\n    onScrollbarYEnabledChange: setScrollbarYEnabled,\n    onCornerWidthChange: setCornerWidth,\n    onCornerHeightChange: setCornerHeight\n  }, /*#__PURE__*/$fnFM9$createElement($fnFM9$Primitive.div, $fnFM9$babelruntimehelpersesmextends({\n    dir: direction\n  }, scrollAreaProps, {\n    ref: composedRefs,\n    style: {\n      position: 'relative',\n      // Pass corner sizes as CSS vars to reduce re-renders of context consumers\n      ['--radix-scroll-area-corner-width']: cornerWidth + 'px',\n      ['--radix-scroll-area-corner-height']: cornerHeight + 'px',\n      ...props.style\n    }\n  })));\n});\n/*#__PURE__*/\n\nObject.assign($57acba87d6e25586$export$ccf8d8d7bbf3c2cc, {\n  displayName: $57acba87d6e25586$var$SCROLL_AREA_NAME\n});\n/* -------------------------------------------------------------------------------------------------\n * ScrollAreaViewport\n * -----------------------------------------------------------------------------------------------*/\n\nconst $57acba87d6e25586$var$VIEWPORT_NAME = 'ScrollAreaViewport';\nconst $57acba87d6e25586$export$a21cbf9f11fca853 = /*#__PURE__*/$fnFM9$forwardRef((props, forwardedRef) => {\n  const {\n    __scopeScrollArea: __scopeScrollArea,\n    children: children,\n    ...viewportProps\n  } = props;\n  const context = $57acba87d6e25586$var$useScrollAreaContext($57acba87d6e25586$var$VIEWPORT_NAME, __scopeScrollArea);\n  const ref = $fnFM9$useRef(null);\n  const composedRefs = $fnFM9$useComposedRefs(forwardedRef, ref, context.onViewportChange);\n  return /*#__PURE__*/$fnFM9$createElement($fnFM9$Fragment, null, /*#__PURE__*/$fnFM9$createElement(\"style\", {\n    dangerouslySetInnerHTML: {\n      __html: `[data-radix-scroll-area-viewport]{scrollbar-width:none;-ms-overflow-style:none;-webkit-overflow-scrolling:touch;}[data-radix-scroll-area-viewport]::-webkit-scrollbar{display:none}`\n    }\n  }), /*#__PURE__*/$fnFM9$createElement($fnFM9$Primitive.div, $fnFM9$babelruntimehelpersesmextends({\n    \"data-radix-scroll-area-viewport\": \"\"\n  }, viewportProps, {\n    ref: composedRefs,\n    style: {\n      /**\n      * We don't support `visible` because the intention is to have at least one scrollbar\n      * if this component is used and `visible` will behave like `auto` in that case\n      * https://developer.mozilla.org/en-US/docs/Web/CSS/overflowed#description\n      *\n      * We don't handle `auto` because the intention is for the native implementation\n      * to be hidden if using this component. We just want to ensure the node is scrollable\n      * so could have used either `scroll` or `auto` here. We picked `scroll` to prevent\n      * the browser from having to work out whether to render native scrollbars or not,\n      * we tell it to with the intention of hiding them in CSS.\n      */\n      overflowX: context.scrollbarXEnabled ? 'scroll' : 'hidden',\n      overflowY: context.scrollbarYEnabled ? 'scroll' : 'hidden',\n      ...props.style\n    }\n  }), /*#__PURE__*/$fnFM9$createElement(\"div\", {\n    ref: context.onContentChange,\n    style: {\n      minWidth: '100%',\n      display: 'table'\n    }\n  }, children)));\n});\n/*#__PURE__*/\n\nObject.assign($57acba87d6e25586$export$a21cbf9f11fca853, {\n  displayName: $57acba87d6e25586$var$VIEWPORT_NAME\n});\n/* -------------------------------------------------------------------------------------------------\n * ScrollAreaScrollbar\n * -----------------------------------------------------------------------------------------------*/\n\nconst $57acba87d6e25586$var$SCROLLBAR_NAME = 'ScrollAreaScrollbar';\nconst $57acba87d6e25586$export$2fabd85d0eba3c57 = /*#__PURE__*/$fnFM9$forwardRef((props, forwardedRef) => {\n  const {\n    forceMount: forceMount,\n    ...scrollbarProps\n  } = props;\n  const context = $57acba87d6e25586$var$useScrollAreaContext($57acba87d6e25586$var$SCROLLBAR_NAME, props.__scopeScrollArea);\n  const {\n    onScrollbarXEnabledChange: onScrollbarXEnabledChange,\n    onScrollbarYEnabledChange: onScrollbarYEnabledChange\n  } = context;\n  const isHorizontal = props.orientation === 'horizontal';\n  $fnFM9$useEffect(() => {\n    isHorizontal ? onScrollbarXEnabledChange(true) : onScrollbarYEnabledChange(true);\n    return () => {\n      isHorizontal ? onScrollbarXEnabledChange(false) : onScrollbarYEnabledChange(false);\n    };\n  }, [isHorizontal, onScrollbarXEnabledChange, onScrollbarYEnabledChange]);\n  return context.type === 'hover' ? /*#__PURE__*/$fnFM9$createElement($57acba87d6e25586$var$ScrollAreaScrollbarHover, $fnFM9$babelruntimehelpersesmextends({}, scrollbarProps, {\n    ref: forwardedRef,\n    forceMount: forceMount\n  })) : context.type === 'scroll' ? /*#__PURE__*/$fnFM9$createElement($57acba87d6e25586$var$ScrollAreaScrollbarScroll, $fnFM9$babelruntimehelpersesmextends({}, scrollbarProps, {\n    ref: forwardedRef,\n    forceMount: forceMount\n  })) : context.type === 'auto' ? /*#__PURE__*/$fnFM9$createElement($57acba87d6e25586$var$ScrollAreaScrollbarAuto, $fnFM9$babelruntimehelpersesmextends({}, scrollbarProps, {\n    ref: forwardedRef,\n    forceMount: forceMount\n  })) : context.type === 'always' ? /*#__PURE__*/$fnFM9$createElement($57acba87d6e25586$var$ScrollAreaScrollbarVisible, $fnFM9$babelruntimehelpersesmextends({}, scrollbarProps, {\n    ref: forwardedRef\n  })) : null;\n});\n/*#__PURE__*/\n\nObject.assign($57acba87d6e25586$export$2fabd85d0eba3c57, {\n  displayName: $57acba87d6e25586$var$SCROLLBAR_NAME\n});\n/* -----------------------------------------------------------------------------------------------*/\n\nconst $57acba87d6e25586$var$ScrollAreaScrollbarHover = /*#__PURE__*/$fnFM9$forwardRef((props, forwardedRef) => {\n  const {\n    forceMount: forceMount,\n    ...scrollbarProps\n  } = props;\n  const context = $57acba87d6e25586$var$useScrollAreaContext($57acba87d6e25586$var$SCROLLBAR_NAME, props.__scopeScrollArea);\n  const [visible, setVisible] = $fnFM9$useState(false);\n  $fnFM9$useEffect(() => {\n    const scrollArea = context.scrollArea;\n    let hideTimer = 0;\n\n    if (scrollArea) {\n      const handlePointerEnter = () => {\n        window.clearTimeout(hideTimer);\n        setVisible(true);\n      };\n\n      const handlePointerLeave = () => {\n        hideTimer = window.setTimeout(() => setVisible(false), context.scrollHideDelay);\n      };\n\n      scrollArea.addEventListener('pointerenter', handlePointerEnter);\n      scrollArea.addEventListener('pointerleave', handlePointerLeave);\n      return () => {\n        window.clearTimeout(hideTimer);\n        scrollArea.removeEventListener('pointerenter', handlePointerEnter);\n        scrollArea.removeEventListener('pointerleave', handlePointerLeave);\n      };\n    }\n  }, [context.scrollArea, context.scrollHideDelay]);\n  return /*#__PURE__*/$fnFM9$createElement($fnFM9$Presence, {\n    present: forceMount || visible\n  }, /*#__PURE__*/$fnFM9$createElement($57acba87d6e25586$var$ScrollAreaScrollbarAuto, $fnFM9$babelruntimehelpersesmextends({\n    \"data-state\": visible ? 'visible' : 'hidden'\n  }, scrollbarProps, {\n    ref: forwardedRef\n  })));\n});\nconst $57acba87d6e25586$var$ScrollAreaScrollbarScroll = /*#__PURE__*/$fnFM9$forwardRef((props, forwardedRef) => {\n  const {\n    forceMount: forceMount,\n    ...scrollbarProps\n  } = props;\n  const context = $57acba87d6e25586$var$useScrollAreaContext($57acba87d6e25586$var$SCROLLBAR_NAME, props.__scopeScrollArea);\n  const isHorizontal = props.orientation === 'horizontal';\n  const debounceScrollEnd = $57acba87d6e25586$var$useDebounceCallback(() => send('SCROLL_END'), 100);\n  const [state, send] = $6c2e24571c90391f$export$3e6543de14f8614f('hidden', {\n    hidden: {\n      SCROLL: 'scrolling'\n    },\n    scrolling: {\n      SCROLL_END: 'idle',\n      POINTER_ENTER: 'interacting'\n    },\n    interacting: {\n      SCROLL: 'interacting',\n      POINTER_LEAVE: 'idle'\n    },\n    idle: {\n      HIDE: 'hidden',\n      SCROLL: 'scrolling',\n      POINTER_ENTER: 'interacting'\n    }\n  });\n  $fnFM9$useEffect(() => {\n    if (state === 'idle') {\n      const hideTimer = window.setTimeout(() => send('HIDE'), context.scrollHideDelay);\n      return () => window.clearTimeout(hideTimer);\n    }\n  }, [state, context.scrollHideDelay, send]);\n  $fnFM9$useEffect(() => {\n    const viewport = context.viewport;\n    const scrollDirection = isHorizontal ? 'scrollLeft' : 'scrollTop';\n\n    if (viewport) {\n      let prevScrollPos = viewport[scrollDirection];\n\n      const handleScroll = () => {\n        const scrollPos = viewport[scrollDirection];\n        const hasScrollInDirectionChanged = prevScrollPos !== scrollPos;\n\n        if (hasScrollInDirectionChanged) {\n          send('SCROLL');\n          debounceScrollEnd();\n        }\n\n        prevScrollPos = scrollPos;\n      };\n\n      viewport.addEventListener('scroll', handleScroll);\n      return () => viewport.removeEventListener('scroll', handleScroll);\n    }\n  }, [context.viewport, isHorizontal, send, debounceScrollEnd]);\n  return /*#__PURE__*/$fnFM9$createElement($fnFM9$Presence, {\n    present: forceMount || state !== 'hidden'\n  }, /*#__PURE__*/$fnFM9$createElement($57acba87d6e25586$var$ScrollAreaScrollbarVisible, $fnFM9$babelruntimehelpersesmextends({\n    \"data-state\": state === 'hidden' ? 'hidden' : 'visible'\n  }, scrollbarProps, {\n    ref: forwardedRef,\n    onPointerEnter: $fnFM9$composeEventHandlers(props.onPointerEnter, () => send('POINTER_ENTER')),\n    onPointerLeave: $fnFM9$composeEventHandlers(props.onPointerLeave, () => send('POINTER_LEAVE'))\n  })));\n});\nconst $57acba87d6e25586$var$ScrollAreaScrollbarAuto = /*#__PURE__*/$fnFM9$forwardRef((props, forwardedRef) => {\n  const context = $57acba87d6e25586$var$useScrollAreaContext($57acba87d6e25586$var$SCROLLBAR_NAME, props.__scopeScrollArea);\n  const {\n    forceMount: forceMount,\n    ...scrollbarProps\n  } = props;\n  const [visible, setVisible] = $fnFM9$useState(false);\n  const isHorizontal = props.orientation === 'horizontal';\n  const handleResize = $57acba87d6e25586$var$useDebounceCallback(() => {\n    if (context.viewport) {\n      const isOverflowX = context.viewport.offsetWidth < context.viewport.scrollWidth;\n      const isOverflowY = context.viewport.offsetHeight < context.viewport.scrollHeight;\n      setVisible(isHorizontal ? isOverflowX : isOverflowY);\n    }\n  }, 10);\n  $57acba87d6e25586$var$useResizeObserver(context.viewport, handleResize);\n  $57acba87d6e25586$var$useResizeObserver(context.content, handleResize);\n  return /*#__PURE__*/$fnFM9$createElement($fnFM9$Presence, {\n    present: forceMount || visible\n  }, /*#__PURE__*/$fnFM9$createElement($57acba87d6e25586$var$ScrollAreaScrollbarVisible, $fnFM9$babelruntimehelpersesmextends({\n    \"data-state\": visible ? 'visible' : 'hidden'\n  }, scrollbarProps, {\n    ref: forwardedRef\n  })));\n});\n/* -----------------------------------------------------------------------------------------------*/\n\nconst $57acba87d6e25586$var$ScrollAreaScrollbarVisible = /*#__PURE__*/$fnFM9$forwardRef((props, forwardedRef) => {\n  const {\n    orientation = 'vertical',\n    ...scrollbarProps\n  } = props;\n  const context = $57acba87d6e25586$var$useScrollAreaContext($57acba87d6e25586$var$SCROLLBAR_NAME, props.__scopeScrollArea);\n  const thumbRef = $fnFM9$useRef(null);\n  const pointerOffsetRef = $fnFM9$useRef(0);\n  const [sizes, setSizes] = $fnFM9$useState({\n    content: 0,\n    viewport: 0,\n    scrollbar: {\n      size: 0,\n      paddingStart: 0,\n      paddingEnd: 0\n    }\n  });\n  const thumbRatio = $57acba87d6e25586$var$getThumbRatio(sizes.viewport, sizes.content);\n  const commonProps = { ...scrollbarProps,\n    sizes: sizes,\n    onSizesChange: setSizes,\n    hasThumb: Boolean(thumbRatio > 0 && thumbRatio < 1),\n    onThumbChange: thumb => thumbRef.current = thumb,\n    onThumbPointerUp: () => pointerOffsetRef.current = 0,\n    onThumbPointerDown: pointerPos => pointerOffsetRef.current = pointerPos\n  };\n\n  function getScrollPosition(pointerPos, dir) {\n    return $57acba87d6e25586$var$getScrollPositionFromPointer(pointerPos, pointerOffsetRef.current, sizes, dir);\n  }\n\n  if (orientation === 'horizontal') return /*#__PURE__*/$fnFM9$createElement($57acba87d6e25586$var$ScrollAreaScrollbarX, $fnFM9$babelruntimehelpersesmextends({}, commonProps, {\n    ref: forwardedRef,\n    onThumbPositionChange: () => {\n      if (context.viewport && thumbRef.current) {\n        const scrollPos = context.viewport.scrollLeft;\n        const offset = $57acba87d6e25586$var$getThumbOffsetFromScroll(scrollPos, sizes, context.dir);\n        thumbRef.current.style.transform = `translate3d(${offset}px, 0, 0)`;\n      }\n    },\n    onWheelScroll: scrollPos => {\n      if (context.viewport) context.viewport.scrollLeft = scrollPos;\n    },\n    onDragScroll: pointerPos => {\n      if (context.viewport) context.viewport.scrollLeft = getScrollPosition(pointerPos, context.dir);\n    }\n  }));\n  if (orientation === 'vertical') return /*#__PURE__*/$fnFM9$createElement($57acba87d6e25586$var$ScrollAreaScrollbarY, $fnFM9$babelruntimehelpersesmextends({}, commonProps, {\n    ref: forwardedRef,\n    onThumbPositionChange: () => {\n      if (context.viewport && thumbRef.current) {\n        const scrollPos = context.viewport.scrollTop;\n        const offset = $57acba87d6e25586$var$getThumbOffsetFromScroll(scrollPos, sizes);\n        thumbRef.current.style.transform = `translate3d(0, ${offset}px, 0)`;\n      }\n    },\n    onWheelScroll: scrollPos => {\n      if (context.viewport) context.viewport.scrollTop = scrollPos;\n    },\n    onDragScroll: pointerPos => {\n      if (context.viewport) context.viewport.scrollTop = getScrollPosition(pointerPos);\n    }\n  }));\n  return null;\n});\n/* -----------------------------------------------------------------------------------------------*/\n\nconst $57acba87d6e25586$var$ScrollAreaScrollbarX = /*#__PURE__*/$fnFM9$forwardRef((props, forwardedRef) => {\n  const {\n    sizes: sizes,\n    onSizesChange: onSizesChange,\n    ...scrollbarProps\n  } = props;\n  const context = $57acba87d6e25586$var$useScrollAreaContext($57acba87d6e25586$var$SCROLLBAR_NAME, props.__scopeScrollArea);\n  const [computedStyle, setComputedStyle] = $fnFM9$useState();\n  const ref = $fnFM9$useRef(null);\n  const composeRefs = $fnFM9$useComposedRefs(forwardedRef, ref, context.onScrollbarXChange);\n  $fnFM9$useEffect(() => {\n    if (ref.current) setComputedStyle(getComputedStyle(ref.current));\n  }, [ref]);\n  return /*#__PURE__*/$fnFM9$createElement($57acba87d6e25586$var$ScrollAreaScrollbarImpl, $fnFM9$babelruntimehelpersesmextends({\n    \"data-orientation\": \"horizontal\"\n  }, scrollbarProps, {\n    ref: composeRefs,\n    sizes: sizes,\n    style: {\n      bottom: 0,\n      left: context.dir === 'rtl' ? 'var(--radix-scroll-area-corner-width)' : 0,\n      right: context.dir === 'ltr' ? 'var(--radix-scroll-area-corner-width)' : 0,\n      ['--radix-scroll-area-thumb-width']: $57acba87d6e25586$var$getThumbSize(sizes) + 'px',\n      ...props.style\n    },\n    onThumbPointerDown: pointerPos => props.onThumbPointerDown(pointerPos.x),\n    onDragScroll: pointerPos => props.onDragScroll(pointerPos.x),\n    onWheelScroll: (event, maxScrollPos) => {\n      if (context.viewport) {\n        const scrollPos = context.viewport.scrollLeft + event.deltaX;\n        props.onWheelScroll(scrollPos); // prevent window scroll when wheeling on scrollbar\n\n        if ($57acba87d6e25586$var$isScrollingWithinScrollbarBounds(scrollPos, maxScrollPos)) event.preventDefault();\n      }\n    },\n    onResize: () => {\n      if (ref.current && context.viewport && computedStyle) onSizesChange({\n        content: context.viewport.scrollWidth,\n        viewport: context.viewport.offsetWidth,\n        scrollbar: {\n          size: ref.current.clientWidth,\n          paddingStart: $57acba87d6e25586$var$toInt(computedStyle.paddingLeft),\n          paddingEnd: $57acba87d6e25586$var$toInt(computedStyle.paddingRight)\n        }\n      });\n    }\n  }));\n});\nconst $57acba87d6e25586$var$ScrollAreaScrollbarY = /*#__PURE__*/$fnFM9$forwardRef((props, forwardedRef) => {\n  const {\n    sizes: sizes,\n    onSizesChange: onSizesChange,\n    ...scrollbarProps\n  } = props;\n  const context = $57acba87d6e25586$var$useScrollAreaContext($57acba87d6e25586$var$SCROLLBAR_NAME, props.__scopeScrollArea);\n  const [computedStyle, setComputedStyle] = $fnFM9$useState();\n  const ref = $fnFM9$useRef(null);\n  const composeRefs = $fnFM9$useComposedRefs(forwardedRef, ref, context.onScrollbarYChange);\n  $fnFM9$useEffect(() => {\n    if (ref.current) setComputedStyle(getComputedStyle(ref.current));\n  }, [ref]);\n  return /*#__PURE__*/$fnFM9$createElement($57acba87d6e25586$var$ScrollAreaScrollbarImpl, $fnFM9$babelruntimehelpersesmextends({\n    \"data-orientation\": \"vertical\"\n  }, scrollbarProps, {\n    ref: composeRefs,\n    sizes: sizes,\n    style: {\n      top: 0,\n      right: context.dir === 'ltr' ? 0 : undefined,\n      left: context.dir === 'rtl' ? 0 : undefined,\n      bottom: 'var(--radix-scroll-area-corner-height)',\n      ['--radix-scroll-area-thumb-height']: $57acba87d6e25586$var$getThumbSize(sizes) + 'px',\n      ...props.style\n    },\n    onThumbPointerDown: pointerPos => props.onThumbPointerDown(pointerPos.y),\n    onDragScroll: pointerPos => props.onDragScroll(pointerPos.y),\n    onWheelScroll: (event, maxScrollPos) => {\n      if (context.viewport) {\n        const scrollPos = context.viewport.scrollTop + event.deltaY;\n        props.onWheelScroll(scrollPos); // prevent window scroll when wheeling on scrollbar\n\n        if ($57acba87d6e25586$var$isScrollingWithinScrollbarBounds(scrollPos, maxScrollPos)) event.preventDefault();\n      }\n    },\n    onResize: () => {\n      if (ref.current && context.viewport && computedStyle) onSizesChange({\n        content: context.viewport.scrollHeight,\n        viewport: context.viewport.offsetHeight,\n        scrollbar: {\n          size: ref.current.clientHeight,\n          paddingStart: $57acba87d6e25586$var$toInt(computedStyle.paddingTop),\n          paddingEnd: $57acba87d6e25586$var$toInt(computedStyle.paddingBottom)\n        }\n      });\n    }\n  }));\n});\n/* -----------------------------------------------------------------------------------------------*/\n\nconst [$57acba87d6e25586$var$ScrollbarProvider, $57acba87d6e25586$var$useScrollbarContext] = $57acba87d6e25586$var$createScrollAreaContext($57acba87d6e25586$var$SCROLLBAR_NAME);\nconst $57acba87d6e25586$var$ScrollAreaScrollbarImpl = /*#__PURE__*/$fnFM9$forwardRef((props, forwardedRef) => {\n  const {\n    __scopeScrollArea: __scopeScrollArea,\n    sizes: sizes,\n    hasThumb: hasThumb,\n    onThumbChange: onThumbChange,\n    onThumbPointerUp: onThumbPointerUp,\n    onThumbPointerDown: onThumbPointerDown,\n    onThumbPositionChange: onThumbPositionChange,\n    onDragScroll: onDragScroll,\n    onWheelScroll: onWheelScroll,\n    onResize: onResize,\n    ...scrollbarProps\n  } = props;\n  const context = $57acba87d6e25586$var$useScrollAreaContext($57acba87d6e25586$var$SCROLLBAR_NAME, __scopeScrollArea);\n  const [scrollbar, setScrollbar] = $fnFM9$useState(null);\n  const composeRefs = $fnFM9$useComposedRefs(forwardedRef, node => setScrollbar(node));\n  const rectRef = $fnFM9$useRef(null);\n  const prevWebkitUserSelectRef = $fnFM9$useRef('');\n  const viewport = context.viewport;\n  const maxScrollPos = sizes.content - sizes.viewport;\n  const handleWheelScroll = $fnFM9$useCallbackRef(onWheelScroll);\n  const handleThumbPositionChange = $fnFM9$useCallbackRef(onThumbPositionChange);\n  const handleResize = $57acba87d6e25586$var$useDebounceCallback(onResize, 10);\n\n  function handleDragScroll(event) {\n    if (rectRef.current) {\n      const x = event.clientX - rectRef.current.left;\n      const y = event.clientY - rectRef.current.top;\n      onDragScroll({\n        x: x,\n        y: y\n      });\n    }\n  }\n  /**\n  * We bind wheel event imperatively so we can switch off passive\n  * mode for document wheel event to allow it to be prevented\n  */\n\n\n  $fnFM9$useEffect(() => {\n    const handleWheel = event => {\n      const element = event.target;\n      const isScrollbarWheel = scrollbar === null || scrollbar === void 0 ? void 0 : scrollbar.contains(element);\n      if (isScrollbarWheel) handleWheelScroll(event, maxScrollPos);\n    };\n\n    document.addEventListener('wheel', handleWheel, {\n      passive: false\n    });\n    return () => document.removeEventListener('wheel', handleWheel, {\n      passive: false\n    });\n  }, [viewport, scrollbar, maxScrollPos, handleWheelScroll]);\n  /**\n  * Update thumb position on sizes change\n  */\n\n  $fnFM9$useEffect(handleThumbPositionChange, [sizes, handleThumbPositionChange]);\n  $57acba87d6e25586$var$useResizeObserver(scrollbar, handleResize);\n  $57acba87d6e25586$var$useResizeObserver(context.content, handleResize);\n  return /*#__PURE__*/$fnFM9$createElement($57acba87d6e25586$var$ScrollbarProvider, {\n    scope: __scopeScrollArea,\n    scrollbar: scrollbar,\n    hasThumb: hasThumb,\n    onThumbChange: $fnFM9$useCallbackRef(onThumbChange),\n    onThumbPointerUp: $fnFM9$useCallbackRef(onThumbPointerUp),\n    onThumbPositionChange: handleThumbPositionChange,\n    onThumbPointerDown: $fnFM9$useCallbackRef(onThumbPointerDown)\n  }, /*#__PURE__*/$fnFM9$createElement($fnFM9$Primitive.div, $fnFM9$babelruntimehelpersesmextends({}, scrollbarProps, {\n    ref: composeRefs,\n    style: {\n      position: 'absolute',\n      ...scrollbarProps.style\n    },\n    onPointerDown: $fnFM9$composeEventHandlers(props.onPointerDown, event => {\n      const mainPointer = 0;\n\n      if (event.button === mainPointer) {\n        const element = event.target;\n        element.setPointerCapture(event.pointerId);\n        rectRef.current = scrollbar.getBoundingClientRect(); // pointer capture doesn't prevent text selection in Safari\n        // so we remove text selection manually when scrolling\n\n        prevWebkitUserSelectRef.current = document.body.style.webkitUserSelect;\n        document.body.style.webkitUserSelect = 'none';\n        handleDragScroll(event);\n      }\n    }),\n    onPointerMove: $fnFM9$composeEventHandlers(props.onPointerMove, handleDragScroll),\n    onPointerUp: $fnFM9$composeEventHandlers(props.onPointerUp, event => {\n      const element = event.target;\n      element.releasePointerCapture(event.pointerId);\n      document.body.style.webkitUserSelect = prevWebkitUserSelectRef.current;\n      rectRef.current = null;\n    })\n  })));\n});\n/* -------------------------------------------------------------------------------------------------\n * ScrollAreaThumb\n * -----------------------------------------------------------------------------------------------*/\n\nconst $57acba87d6e25586$var$THUMB_NAME = 'ScrollAreaThumb';\nconst $57acba87d6e25586$export$9fba1154677d7cd2 = /*#__PURE__*/$fnFM9$forwardRef((props, forwardedRef) => {\n  const {\n    forceMount: forceMount,\n    ...thumbProps\n  } = props;\n  const scrollbarContext = $57acba87d6e25586$var$useScrollbarContext($57acba87d6e25586$var$THUMB_NAME, props.__scopeScrollArea);\n  return /*#__PURE__*/$fnFM9$createElement($fnFM9$Presence, {\n    present: forceMount || scrollbarContext.hasThumb\n  }, /*#__PURE__*/$fnFM9$createElement($57acba87d6e25586$var$ScrollAreaThumbImpl, $fnFM9$babelruntimehelpersesmextends({\n    ref: forwardedRef\n  }, thumbProps)));\n});\nconst $57acba87d6e25586$var$ScrollAreaThumbImpl = /*#__PURE__*/$fnFM9$forwardRef((props, forwardedRef) => {\n  const {\n    __scopeScrollArea: __scopeScrollArea,\n    style: style,\n    ...thumbProps\n  } = props;\n  const scrollAreaContext = $57acba87d6e25586$var$useScrollAreaContext($57acba87d6e25586$var$THUMB_NAME, __scopeScrollArea);\n  const scrollbarContext = $57acba87d6e25586$var$useScrollbarContext($57acba87d6e25586$var$THUMB_NAME, __scopeScrollArea);\n  const {\n    onThumbPositionChange: onThumbPositionChange\n  } = scrollbarContext;\n  const composedRef = $fnFM9$useComposedRefs(forwardedRef, node => scrollbarContext.onThumbChange(node));\n  const removeUnlinkedScrollListenerRef = $fnFM9$useRef();\n  const debounceScrollEnd = $57acba87d6e25586$var$useDebounceCallback(() => {\n    if (removeUnlinkedScrollListenerRef.current) {\n      removeUnlinkedScrollListenerRef.current();\n      removeUnlinkedScrollListenerRef.current = undefined;\n    }\n  }, 100);\n  $fnFM9$useEffect(() => {\n    const viewport = scrollAreaContext.viewport;\n\n    if (viewport) {\n      /**\n      * We only bind to native scroll event so we know when scroll starts and ends.\n      * When scroll starts we start a requestAnimationFrame loop that checks for\n      * changes to scroll position. That rAF loop triggers our thumb position change\n      * when relevant to avoid scroll-linked effects. We cancel the loop when scroll ends.\n      * https://developer.mozilla.org/en-US/docs/Mozilla/Performance/Scroll-linked_effects\n      */\n      const handleScroll = () => {\n        debounceScrollEnd();\n\n        if (!removeUnlinkedScrollListenerRef.current) {\n          const listener = $57acba87d6e25586$var$addUnlinkedScrollListener(viewport, onThumbPositionChange);\n          removeUnlinkedScrollListenerRef.current = listener;\n          onThumbPositionChange();\n        }\n      };\n\n      onThumbPositionChange();\n      viewport.addEventListener('scroll', handleScroll);\n      return () => viewport.removeEventListener('scroll', handleScroll);\n    }\n  }, [scrollAreaContext.viewport, debounceScrollEnd, onThumbPositionChange]);\n  return /*#__PURE__*/$fnFM9$createElement($fnFM9$Primitive.div, $fnFM9$babelruntimehelpersesmextends({\n    \"data-state\": scrollbarContext.hasThumb ? 'visible' : 'hidden'\n  }, thumbProps, {\n    ref: composedRef,\n    style: {\n      width: 'var(--radix-scroll-area-thumb-width)',\n      height: 'var(--radix-scroll-area-thumb-height)',\n      ...style\n    },\n    onPointerDownCapture: $fnFM9$composeEventHandlers(props.onPointerDownCapture, event => {\n      const thumb = event.target;\n      const thumbRect = thumb.getBoundingClientRect();\n      const x = event.clientX - thumbRect.left;\n      const y = event.clientY - thumbRect.top;\n      scrollbarContext.onThumbPointerDown({\n        x: x,\n        y: y\n      });\n    }),\n    onPointerUp: $fnFM9$composeEventHandlers(props.onPointerUp, scrollbarContext.onThumbPointerUp)\n  }));\n});\n/*#__PURE__*/\n\nObject.assign($57acba87d6e25586$export$9fba1154677d7cd2, {\n  displayName: $57acba87d6e25586$var$THUMB_NAME\n});\n/* -------------------------------------------------------------------------------------------------\n * ScrollAreaCorner\n * -----------------------------------------------------------------------------------------------*/\n\nconst $57acba87d6e25586$var$CORNER_NAME = 'ScrollAreaCorner';\nconst $57acba87d6e25586$export$56969d565df7cc4b = /*#__PURE__*/$fnFM9$forwardRef((props, forwardedRef) => {\n  const context = $57acba87d6e25586$var$useScrollAreaContext($57acba87d6e25586$var$CORNER_NAME, props.__scopeScrollArea);\n  const hasBothScrollbarsVisible = Boolean(context.scrollbarX && context.scrollbarY);\n  const hasCorner = context.type !== 'scroll' && hasBothScrollbarsVisible;\n  return hasCorner ? /*#__PURE__*/$fnFM9$createElement($57acba87d6e25586$var$ScrollAreaCornerImpl, $fnFM9$babelruntimehelpersesmextends({}, props, {\n    ref: forwardedRef\n  })) : null;\n});\n/*#__PURE__*/\n\nObject.assign($57acba87d6e25586$export$56969d565df7cc4b, {\n  displayName: $57acba87d6e25586$var$CORNER_NAME\n});\n/* -----------------------------------------------------------------------------------------------*/\n\nconst $57acba87d6e25586$var$ScrollAreaCornerImpl = /*#__PURE__*/$fnFM9$forwardRef((props, forwardedRef) => {\n  const {\n    __scopeScrollArea: __scopeScrollArea,\n    ...cornerProps\n  } = props;\n  const context = $57acba87d6e25586$var$useScrollAreaContext($57acba87d6e25586$var$CORNER_NAME, __scopeScrollArea);\n  const [width1, setWidth] = $fnFM9$useState(0);\n  const [height1, setHeight] = $fnFM9$useState(0);\n  const hasSize = Boolean(width1 && height1);\n  $57acba87d6e25586$var$useResizeObserver(context.scrollbarX, () => {\n    var _context$scrollbarX;\n\n    const height = ((_context$scrollbarX = context.scrollbarX) === null || _context$scrollbarX === void 0 ? void 0 : _context$scrollbarX.offsetHeight) || 0;\n    context.onCornerHeightChange(height);\n    setHeight(height);\n  });\n  $57acba87d6e25586$var$useResizeObserver(context.scrollbarY, () => {\n    var _context$scrollbarY;\n\n    const width = ((_context$scrollbarY = context.scrollbarY) === null || _context$scrollbarY === void 0 ? void 0 : _context$scrollbarY.offsetWidth) || 0;\n    context.onCornerWidthChange(width);\n    setWidth(width);\n  });\n  return hasSize ? /*#__PURE__*/$fnFM9$createElement($fnFM9$Primitive.div, $fnFM9$babelruntimehelpersesmextends({}, cornerProps, {\n    ref: forwardedRef,\n    style: {\n      width: width1,\n      height: height1,\n      position: 'absolute',\n      right: context.dir === 'ltr' ? 0 : undefined,\n      left: context.dir === 'rtl' ? 0 : undefined,\n      bottom: 0,\n      ...props.style\n    }\n  })) : null;\n});\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction $57acba87d6e25586$var$toInt(value) {\n  return value ? parseInt(value, 10) : 0;\n}\n\nfunction $57acba87d6e25586$var$getThumbRatio(viewportSize, contentSize) {\n  const ratio = viewportSize / contentSize;\n  return isNaN(ratio) ? 0 : ratio;\n}\n\nfunction $57acba87d6e25586$var$getThumbSize(sizes) {\n  const ratio = $57acba87d6e25586$var$getThumbRatio(sizes.viewport, sizes.content);\n  const scrollbarPadding = sizes.scrollbar.paddingStart + sizes.scrollbar.paddingEnd;\n  const thumbSize = (sizes.scrollbar.size - scrollbarPadding) * ratio; // minimum of 18 matches macOS minimum\n\n  return Math.max(thumbSize, 18);\n}\n\nfunction $57acba87d6e25586$var$getScrollPositionFromPointer(pointerPos, pointerOffset, sizes, dir = 'ltr') {\n  const thumbSizePx = $57acba87d6e25586$var$getThumbSize(sizes);\n  const thumbCenter = thumbSizePx / 2;\n  const offset = pointerOffset || thumbCenter;\n  const thumbOffsetFromEnd = thumbSizePx - offset;\n  const minPointerPos = sizes.scrollbar.paddingStart + offset;\n  const maxPointerPos = sizes.scrollbar.size - sizes.scrollbar.paddingEnd - thumbOffsetFromEnd;\n  const maxScrollPos = sizes.content - sizes.viewport;\n  const scrollRange = dir === 'ltr' ? [0, maxScrollPos] : [maxScrollPos * -1, 0];\n  const interpolate = $57acba87d6e25586$var$linearScale([minPointerPos, maxPointerPos], scrollRange);\n  return interpolate(pointerPos);\n}\n\nfunction $57acba87d6e25586$var$getThumbOffsetFromScroll(scrollPos, sizes, dir = 'ltr') {\n  const thumbSizePx = $57acba87d6e25586$var$getThumbSize(sizes);\n  const scrollbarPadding = sizes.scrollbar.paddingStart + sizes.scrollbar.paddingEnd;\n  const scrollbar = sizes.scrollbar.size - scrollbarPadding;\n  const maxScrollPos = sizes.content - sizes.viewport;\n  const maxThumbPos = scrollbar - thumbSizePx;\n  const scrollClampRange = dir === 'ltr' ? [0, maxScrollPos] : [maxScrollPos * -1, 0];\n  const scrollWithoutMomentum = $fnFM9$clamp(scrollPos, scrollClampRange);\n  const interpolate = $57acba87d6e25586$var$linearScale([0, maxScrollPos], [0, maxThumbPos]);\n  return interpolate(scrollWithoutMomentum);\n} // https://github.com/tmcw-up-for-adoption/simple-linear-scale/blob/master/index.js\n\n\nfunction $57acba87d6e25586$var$linearScale(input, output) {\n  return value => {\n    if (input[0] === input[1] || output[0] === output[1]) return output[0];\n    const ratio = (output[1] - output[0]) / (input[1] - input[0]);\n    return output[0] + ratio * (value - input[0]);\n  };\n}\n\nfunction $57acba87d6e25586$var$isScrollingWithinScrollbarBounds(scrollPos, maxScrollPos) {\n  return scrollPos > 0 && scrollPos < maxScrollPos;\n} // Custom scroll handler to avoid scroll-linked effects\n// https://developer.mozilla.org/en-US/docs/Mozilla/Performance/Scroll-linked_effects\n\n\nconst $57acba87d6e25586$var$addUnlinkedScrollListener = (node, handler = () => {}) => {\n  let prevPosition = {\n    left: node.scrollLeft,\n    top: node.scrollTop\n  };\n  let rAF = 0;\n\n  (function loop() {\n    const position = {\n      left: node.scrollLeft,\n      top: node.scrollTop\n    };\n    const isHorizontalScroll = prevPosition.left !== position.left;\n    const isVerticalScroll = prevPosition.top !== position.top;\n    if (isHorizontalScroll || isVerticalScroll) handler();\n    prevPosition = position;\n    rAF = window.requestAnimationFrame(loop);\n  })();\n\n  return () => window.cancelAnimationFrame(rAF);\n};\n\nfunction $57acba87d6e25586$var$useDebounceCallback(callback, delay) {\n  const handleCallback = $fnFM9$useCallbackRef(callback);\n  const debounceTimerRef = $fnFM9$useRef(0);\n  $fnFM9$useEffect(() => () => window.clearTimeout(debounceTimerRef.current), []);\n  return $fnFM9$useCallback(() => {\n    window.clearTimeout(debounceTimerRef.current);\n    debounceTimerRef.current = window.setTimeout(handleCallback, delay);\n  }, [handleCallback, delay]);\n}\n\nfunction $57acba87d6e25586$var$useResizeObserver(element, onResize) {\n  const handleResize = $fnFM9$useCallbackRef(onResize);\n  $fnFM9$useLayoutEffect(() => {\n    let rAF = 0;\n\n    if (element) {\n      /**\n      * Resize Observer will throw an often benign error that says `ResizeObserver loop\n      * completed with undelivered notifications`. This means that ResizeObserver was not\n      * able to deliver all observations within a single animation frame, so we use\n      * `requestAnimationFrame` to ensure we don't deliver unnecessary observations.\n      * Further reading: https://github.com/WICG/resize-observer/issues/38\n      */\n      const resizeObserver = new ResizeObserver(() => {\n        cancelAnimationFrame(rAF);\n        rAF = window.requestAnimationFrame(handleResize);\n      });\n      resizeObserver.observe(element);\n      return () => {\n        window.cancelAnimationFrame(rAF);\n        resizeObserver.unobserve(element);\n      };\n    }\n  }, [element, handleResize]);\n}\n/* -----------------------------------------------------------------------------------------------*/\n\n\nconst $57acba87d6e25586$export$be92b6f5f03c0fe9 = $57acba87d6e25586$export$ccf8d8d7bbf3c2cc;\nconst $57acba87d6e25586$export$d5c6c08dc2d3ca7 = $57acba87d6e25586$export$a21cbf9f11fca853;\nconst $57acba87d6e25586$export$9a4e88b92edfce6b = $57acba87d6e25586$export$2fabd85d0eba3c57;\nconst $57acba87d6e25586$export$6521433ed15a34db = $57acba87d6e25586$export$9fba1154677d7cd2;\nconst $57acba87d6e25586$export$ac61190d9fc311a9 = $57acba87d6e25586$export$56969d565df7cc4b;\nexport { $57acba87d6e25586$export$488468afe3a6f2b1 as createScrollAreaScope, $57acba87d6e25586$export$ccf8d8d7bbf3c2cc as ScrollArea, $57acba87d6e25586$export$a21cbf9f11fca853 as ScrollAreaViewport, $57acba87d6e25586$export$2fabd85d0eba3c57 as ScrollAreaScrollbar, $57acba87d6e25586$export$9fba1154677d7cd2 as ScrollAreaThumb, $57acba87d6e25586$export$56969d565df7cc4b as ScrollAreaCorner, $57acba87d6e25586$export$be92b6f5f03c0fe9 as Root, $57acba87d6e25586$export$d5c6c08dc2d3ca7 as Viewport, $57acba87d6e25586$export$9a4e88b92edfce6b as Scrollbar, $57acba87d6e25586$export$6521433ed15a34db as Thumb, $57acba87d6e25586$export$ac61190d9fc311a9 as Corner };","map":{"version":3,"sources":["packages/react/scroll-area/src/ScrollArea.tsx","packages/react/scroll-area/src/useStateMachine.ts"],"names":["SCROLL_AREA_NAME","createContextScope","createScrollAreaContext","ScrollArea","type","scrollHideDelay","React","composedRefs","useComposedRefs","node","setScrollArea","direction","useDirection","position","cornerWidth","cornerHeight","props","VIEWPORT_NAME","ScrollAreaViewport","context","useScrollAreaContext","ref","__html","overflowX","overflowY","minWidth","display","SCROLLBAR_NAME","ScrollAreaScrollbar","isHorizontal","onScrollbarXEnabledChange","onScrollbarYEnabledChange","ScrollAreaScrollbarHover","scrollArea","hideTimer","handlePointerEnter","window","setVisible","handlePointerLeave","forceMount","visible","ScrollAreaScrollbarScroll","debounceScrollEnd","useDebounceCallback","send","useStateMachine","hidden","SCROLL","scrolling","SCROLL_END","POINTER_ENTER","interacting","POINTER_LEAVE","idle","HIDE","state","viewport","scrollDirection","prevScrollPos","handleScroll","scrollPos","hasScrollInDirectionChanged","composeEventHandlers","ScrollAreaScrollbarAuto","handleResize","isOverflowX","isOverflowY","useResizeObserver","ScrollAreaScrollbarVisible","orientation","thumbRef","pointerOffsetRef","content","scrollbar","size","paddingStart","paddingEnd","thumbRatio","getThumbRatio","sizes","commonProps","onSizesChange","hasThumb","Boolean","onThumbChange","thumb","onThumbPointerUp","onThumbPointerDown","pointerPos","getScrollPositionFromPointer","offset","getThumbOffsetFromScroll","getScrollPosition","ScrollAreaScrollbarX","composeRefs","setComputedStyle","getComputedStyle","bottom","left","right","getThumbSize","event","isScrollingWithinScrollbarBounds","toInt","computedStyle","ScrollAreaScrollbarY","top","ScrollAreaScrollbarImpl","setScrollbar","rectRef","prevWebkitUserSelectRef","maxScrollPos","handleWheelScroll","useCallbackRef","handleThumbPositionChange","x","y","onDragScroll","handleWheel","element","isScrollbarWheel","document","passive","scrollbarProps","mainPointer","handleDragScroll","THUMB_NAME","ScrollAreaThumb","scrollbarContext","useScrollbarContext","ScrollAreaThumbImpl","scrollAreaContext","composedRef","removeUnlinkedScrollListenerRef","listener","addUnlinkedScrollListener","onThumbPositionChange","width","height","thumbRect","CORNER_NAME","ScrollAreaCorner","hasBothScrollbarsVisible","hasCorner","ScrollAreaCornerImpl","hasSize","setHeight","setWidth","value","parseInt","ratio","viewportSize","isNaN","scrollbarPadding","thumbSize","Math","dir","thumbSizePx","thumbCenter","pointerOffset","thumbOffsetFromEnd","minPointerPos","maxPointerPos","scrollRange","interpolate","linearScale","maxThumbPos","scrollClampRange","scrollWithoutMomentum","clamp","input","output","handler","prevPosition","rAF","isHorizontalScroll","isVerticalScroll","handleCallback","debounceTimerRef","useLayoutEffect","resizeObserver","cancelAnimationFrame","Root","Viewport","Scrollbar","Thumb","Corner","nextState","machine"],"mappings":"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","sourcesContent":["/// <reference types=\"resize-observer-browser\" />\n\nimport * as React from 'react';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { Presence } from '@radix-ui/react-presence';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\nimport { useDirection } from '@radix-ui/react-direction';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\nimport { clamp } from '@radix-ui/number';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useStateMachine } from './useStateMachine';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\ntype Direction = 'ltr' | 'rtl';\ntype Sizes = {\n  content: number;\n  viewport: number;\n  scrollbar: {\n    size: number;\n    paddingStart: number;\n    paddingEnd: number;\n  };\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ScrollArea\n * -----------------------------------------------------------------------------------------------*/\n\nconst SCROLL_AREA_NAME = 'ScrollArea';\n\ntype ScopedProps<P> = P & { __scopeScrollArea?: Scope };\nconst [createScrollAreaContext, createScrollAreaScope] = createContextScope(SCROLL_AREA_NAME);\n\ntype ScrollAreaContextValue = {\n  type: 'auto' | 'always' | 'scroll' | 'hover';\n  dir: Direction;\n  scrollHideDelay: number;\n  scrollArea: ScrollAreaElement | null;\n  viewport: ScrollAreaViewportElement | null;\n  onViewportChange(viewport: ScrollAreaViewportElement | null): void;\n  content: HTMLDivElement | null;\n  onContentChange(content: HTMLDivElement): void;\n  scrollbarX: ScrollAreaScrollbarElement | null;\n  onScrollbarXChange(scrollbar: ScrollAreaScrollbarElement | null): void;\n  scrollbarXEnabled: boolean;\n  onScrollbarXEnabledChange(rendered: boolean): void;\n  scrollbarY: ScrollAreaScrollbarElement | null;\n  onScrollbarYChange(scrollbar: ScrollAreaScrollbarElement | null): void;\n  scrollbarYEnabled: boolean;\n  onScrollbarYEnabledChange(rendered: boolean): void;\n  onCornerWidthChange(width: number): void;\n  onCornerHeightChange(height: number): void;\n};\n\nconst [ScrollAreaProvider, useScrollAreaContext] =\n  createScrollAreaContext<ScrollAreaContextValue>(SCROLL_AREA_NAME);\n\ntype ScrollAreaElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface ScrollAreaProps extends PrimitiveDivProps {\n  type?: ScrollAreaContextValue['type'];\n  dir?: ScrollAreaContextValue['dir'];\n  scrollHideDelay?: number;\n}\n\nconst ScrollArea = React.forwardRef<ScrollAreaElement, ScrollAreaProps>(\n  (props: ScopedProps<ScrollAreaProps>, forwardedRef) => {\n    const {\n      __scopeScrollArea,\n      type = 'hover',\n      dir,\n      scrollHideDelay = 600,\n      ...scrollAreaProps\n    } = props;\n    const [scrollArea, setScrollArea] = React.useState<ScrollAreaElement | null>(null);\n    const [viewport, setViewport] = React.useState<ScrollAreaViewportElement | null>(null);\n    const [content, setContent] = React.useState<HTMLDivElement | null>(null);\n    const [scrollbarX, setScrollbarX] = React.useState<ScrollAreaScrollbarElement | null>(null);\n    const [scrollbarY, setScrollbarY] = React.useState<ScrollAreaScrollbarElement | null>(null);\n    const [cornerWidth, setCornerWidth] = React.useState(0);\n    const [cornerHeight, setCornerHeight] = React.useState(0);\n    const [scrollbarXEnabled, setScrollbarXEnabled] = React.useState(false);\n    const [scrollbarYEnabled, setScrollbarYEnabled] = React.useState(false);\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setScrollArea(node));\n    const direction = useDirection(dir);\n\n    return (\n      <ScrollAreaProvider\n        scope={__scopeScrollArea}\n        type={type}\n        dir={direction}\n        scrollHideDelay={scrollHideDelay}\n        scrollArea={scrollArea}\n        viewport={viewport}\n        onViewportChange={setViewport}\n        content={content}\n        onContentChange={setContent}\n        scrollbarX={scrollbarX}\n        onScrollbarXChange={setScrollbarX}\n        scrollbarXEnabled={scrollbarXEnabled}\n        onScrollbarXEnabledChange={setScrollbarXEnabled}\n        scrollbarY={scrollbarY}\n        onScrollbarYChange={setScrollbarY}\n        scrollbarYEnabled={scrollbarYEnabled}\n        onScrollbarYEnabledChange={setScrollbarYEnabled}\n        onCornerWidthChange={setCornerWidth}\n        onCornerHeightChange={setCornerHeight}\n      >\n        <Primitive.div\n          dir={direction}\n          {...scrollAreaProps}\n          ref={composedRefs}\n          style={{\n            position: 'relative',\n            // Pass corner sizes as CSS vars to reduce re-renders of context consumers\n            ['--radix-scroll-area-corner-width' as any]: cornerWidth + 'px',\n            ['--radix-scroll-area-corner-height' as any]: cornerHeight + 'px',\n            ...props.style,\n          }}\n        />\n      </ScrollAreaProvider>\n    );\n  }\n);\n\nScrollArea.displayName = SCROLL_AREA_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ScrollAreaViewport\n * -----------------------------------------------------------------------------------------------*/\n\nconst VIEWPORT_NAME = 'ScrollAreaViewport';\n\ntype ScrollAreaViewportElement = React.ElementRef<typeof Primitive.div>;\ninterface ScrollAreaViewportProps extends PrimitiveDivProps {}\n\nconst ScrollAreaViewport = React.forwardRef<ScrollAreaViewportElement, ScrollAreaViewportProps>(\n  (props: ScopedProps<ScrollAreaViewportProps>, forwardedRef) => {\n    const { __scopeScrollArea, children, ...viewportProps } = props;\n    const context = useScrollAreaContext(VIEWPORT_NAME, __scopeScrollArea);\n    const ref = React.useRef<ScrollAreaViewportElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref, context.onViewportChange);\n    return (\n      <>\n        {/* Hide scrollbars cross-browser and enable momentum scroll for touch devices */}\n        <style\n          dangerouslySetInnerHTML={{\n            __html: `[data-radix-scroll-area-viewport]{scrollbar-width:none;-ms-overflow-style:none;-webkit-overflow-scrolling:touch;}[data-radix-scroll-area-viewport]::-webkit-scrollbar{display:none}`,\n          }}\n        />\n        <Primitive.div\n          data-radix-scroll-area-viewport=\"\"\n          {...viewportProps}\n          ref={composedRefs}\n          style={{\n            /**\n             * We don't support `visible` because the intention is to have at least one scrollbar\n             * if this component is used and `visible` will behave like `auto` in that case\n             * https://developer.mozilla.org/en-US/docs/Web/CSS/overflowed#description\n             *\n             * We don't handle `auto` because the intention is for the native implementation\n             * to be hidden if using this component. We just want to ensure the node is scrollable\n             * so could have used either `scroll` or `auto` here. We picked `scroll` to prevent\n             * the browser from having to work out whether to render native scrollbars or not,\n             * we tell it to with the intention of hiding them in CSS.\n             */\n            overflowX: context.scrollbarXEnabled ? 'scroll' : 'hidden',\n            overflowY: context.scrollbarYEnabled ? 'scroll' : 'hidden',\n            ...props.style,\n          }}\n        >\n          {/**\n           * `display: table` ensures our content div will match the size of its children in both\n           * horizontal and vertical axis so we can determine if scroll width/height changed and\n           * recalculate thumb sizes. This doesn't account for children with *percentage*\n           * widths that change. We'll wait to see what use-cases consumers come up with there\n           * before trying to resolve it.\n           */}\n          <div ref={context.onContentChange} style={{ minWidth: '100%', display: 'table' }}>\n            {children}\n          </div>\n        </Primitive.div>\n      </>\n    );\n  }\n);\n\nScrollAreaViewport.displayName = VIEWPORT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ScrollAreaScrollbar\n * -----------------------------------------------------------------------------------------------*/\n\nconst SCROLLBAR_NAME = 'ScrollAreaScrollbar';\n\ntype ScrollAreaScrollbarElement = ScrollAreaScrollbarVisibleElement;\ninterface ScrollAreaScrollbarProps extends ScrollAreaScrollbarVisibleProps {\n  forceMount?: true;\n}\n\nconst ScrollAreaScrollbar = React.forwardRef<ScrollAreaScrollbarElement, ScrollAreaScrollbarProps>(\n  (props: ScopedProps<ScrollAreaScrollbarProps>, forwardedRef) => {\n    const { forceMount, ...scrollbarProps } = props;\n    const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n    const { onScrollbarXEnabledChange, onScrollbarYEnabledChange } = context;\n    const isHorizontal = props.orientation === 'horizontal';\n\n    React.useEffect(() => {\n      isHorizontal ? onScrollbarXEnabledChange(true) : onScrollbarYEnabledChange(true);\n      return () => {\n        isHorizontal ? onScrollbarXEnabledChange(false) : onScrollbarYEnabledChange(false);\n      };\n    }, [isHorizontal, onScrollbarXEnabledChange, onScrollbarYEnabledChange]);\n\n    return context.type === 'hover' ? (\n      <ScrollAreaScrollbarHover {...scrollbarProps} ref={forwardedRef} forceMount={forceMount} />\n    ) : context.type === 'scroll' ? (\n      <ScrollAreaScrollbarScroll {...scrollbarProps} ref={forwardedRef} forceMount={forceMount} />\n    ) : context.type === 'auto' ? (\n      <ScrollAreaScrollbarAuto {...scrollbarProps} ref={forwardedRef} forceMount={forceMount} />\n    ) : context.type === 'always' ? (\n      <ScrollAreaScrollbarVisible {...scrollbarProps} ref={forwardedRef} />\n    ) : null;\n  }\n);\n\nScrollAreaScrollbar.displayName = SCROLLBAR_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ScrollAreaScrollbarHoverElement = ScrollAreaScrollbarAutoElement;\ninterface ScrollAreaScrollbarHoverProps extends ScrollAreaScrollbarAutoProps {\n  forceMount?: true;\n}\n\nconst ScrollAreaScrollbarHover = React.forwardRef<\n  ScrollAreaScrollbarHoverElement,\n  ScrollAreaScrollbarHoverProps\n>((props: ScopedProps<ScrollAreaScrollbarHoverProps>, forwardedRef) => {\n  const { forceMount, ...scrollbarProps } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const [visible, setVisible] = React.useState(false);\n\n  React.useEffect(() => {\n    const scrollArea = context.scrollArea;\n    let hideTimer = 0;\n    if (scrollArea) {\n      const handlePointerEnter = () => {\n        window.clearTimeout(hideTimer);\n        setVisible(true);\n      };\n      const handlePointerLeave = () => {\n        hideTimer = window.setTimeout(() => setVisible(false), context.scrollHideDelay);\n      };\n      scrollArea.addEventListener('pointerenter', handlePointerEnter);\n      scrollArea.addEventListener('pointerleave', handlePointerLeave);\n      return () => {\n        window.clearTimeout(hideTimer);\n        scrollArea.removeEventListener('pointerenter', handlePointerEnter);\n        scrollArea.removeEventListener('pointerleave', handlePointerLeave);\n      };\n    }\n  }, [context.scrollArea, context.scrollHideDelay]);\n\n  return (\n    <Presence present={forceMount || visible}>\n      <ScrollAreaScrollbarAuto\n        data-state={visible ? 'visible' : 'hidden'}\n        {...scrollbarProps}\n        ref={forwardedRef}\n      />\n    </Presence>\n  );\n});\n\ntype ScrollAreaScrollbarScrollElement = ScrollAreaScrollbarVisibleElement;\ninterface ScrollAreaScrollbarScrollProps extends ScrollAreaScrollbarVisibleProps {\n  forceMount?: true;\n}\n\nconst ScrollAreaScrollbarScroll = React.forwardRef<\n  ScrollAreaScrollbarScrollElement,\n  ScrollAreaScrollbarScrollProps\n>((props: ScopedProps<ScrollAreaScrollbarScrollProps>, forwardedRef) => {\n  const { forceMount, ...scrollbarProps } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const isHorizontal = props.orientation === 'horizontal';\n  const debounceScrollEnd = useDebounceCallback(() => send('SCROLL_END'), 100);\n  const [state, send] = useStateMachine('hidden', {\n    hidden: {\n      SCROLL: 'scrolling',\n    },\n    scrolling: {\n      SCROLL_END: 'idle',\n      POINTER_ENTER: 'interacting',\n    },\n    interacting: {\n      SCROLL: 'interacting',\n      POINTER_LEAVE: 'idle',\n    },\n    idle: {\n      HIDE: 'hidden',\n      SCROLL: 'scrolling',\n      POINTER_ENTER: 'interacting',\n    },\n  });\n\n  React.useEffect(() => {\n    if (state === 'idle') {\n      const hideTimer = window.setTimeout(() => send('HIDE'), context.scrollHideDelay);\n      return () => window.clearTimeout(hideTimer);\n    }\n  }, [state, context.scrollHideDelay, send]);\n\n  React.useEffect(() => {\n    const viewport = context.viewport;\n    const scrollDirection = isHorizontal ? 'scrollLeft' : 'scrollTop';\n\n    if (viewport) {\n      let prevScrollPos = viewport[scrollDirection];\n      const handleScroll = () => {\n        const scrollPos = viewport[scrollDirection];\n        const hasScrollInDirectionChanged = prevScrollPos !== scrollPos;\n        if (hasScrollInDirectionChanged) {\n          send('SCROLL');\n          debounceScrollEnd();\n        }\n        prevScrollPos = scrollPos;\n      };\n      viewport.addEventListener('scroll', handleScroll);\n      return () => viewport.removeEventListener('scroll', handleScroll);\n    }\n  }, [context.viewport, isHorizontal, send, debounceScrollEnd]);\n\n  return (\n    <Presence present={forceMount || state !== 'hidden'}>\n      <ScrollAreaScrollbarVisible\n        data-state={state === 'hidden' ? 'hidden' : 'visible'}\n        {...scrollbarProps}\n        ref={forwardedRef}\n        onPointerEnter={composeEventHandlers(props.onPointerEnter, () => send('POINTER_ENTER'))}\n        onPointerLeave={composeEventHandlers(props.onPointerLeave, () => send('POINTER_LEAVE'))}\n      />\n    </Presence>\n  );\n});\n\ntype ScrollAreaScrollbarAutoElement = ScrollAreaScrollbarVisibleElement;\ninterface ScrollAreaScrollbarAutoProps extends ScrollAreaScrollbarVisibleProps {\n  forceMount?: true;\n}\n\nconst ScrollAreaScrollbarAuto = React.forwardRef<\n  ScrollAreaScrollbarAutoElement,\n  ScrollAreaScrollbarAutoProps\n>((props: ScopedProps<ScrollAreaScrollbarAutoProps>, forwardedRef) => {\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const { forceMount, ...scrollbarProps } = props;\n  const [visible, setVisible] = React.useState(false);\n  const isHorizontal = props.orientation === 'horizontal';\n  const handleResize = useDebounceCallback(() => {\n    if (context.viewport) {\n      const isOverflowX = context.viewport.offsetWidth < context.viewport.scrollWidth;\n      const isOverflowY = context.viewport.offsetHeight < context.viewport.scrollHeight;\n      setVisible(isHorizontal ? isOverflowX : isOverflowY);\n    }\n  }, 10);\n\n  useResizeObserver(context.viewport, handleResize);\n  useResizeObserver(context.content, handleResize);\n\n  return (\n    <Presence present={forceMount || visible}>\n      <ScrollAreaScrollbarVisible\n        data-state={visible ? 'visible' : 'hidden'}\n        {...scrollbarProps}\n        ref={forwardedRef}\n      />\n    </Presence>\n  );\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ScrollAreaScrollbarVisibleElement = ScrollAreaScrollbarAxisElement;\ninterface ScrollAreaScrollbarVisibleProps\n  extends Omit<ScrollAreaScrollbarAxisProps, keyof ScrollAreaScrollbarAxisPrivateProps> {\n  orientation?: 'horizontal' | 'vertical';\n}\n\nconst ScrollAreaScrollbarVisible = React.forwardRef<\n  ScrollAreaScrollbarVisibleElement,\n  ScrollAreaScrollbarVisibleProps\n>((props: ScopedProps<ScrollAreaScrollbarVisibleProps>, forwardedRef) => {\n  const { orientation = 'vertical', ...scrollbarProps } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const thumbRef = React.useRef<ScrollAreaThumbElement | null>(null);\n  const pointerOffsetRef = React.useRef(0);\n  const [sizes, setSizes] = React.useState<Sizes>({\n    content: 0,\n    viewport: 0,\n    scrollbar: { size: 0, paddingStart: 0, paddingEnd: 0 },\n  });\n  const thumbRatio = getThumbRatio(sizes.viewport, sizes.content);\n\n  type UncommonProps = 'onThumbPositionChange' | 'onDragScroll' | 'onWheelScroll';\n  const commonProps: Omit<ScrollAreaScrollbarAxisPrivateProps, UncommonProps> = {\n    ...scrollbarProps,\n    sizes,\n    onSizesChange: setSizes,\n    hasThumb: Boolean(thumbRatio > 0 && thumbRatio < 1),\n    onThumbChange: (thumb) => (thumbRef.current = thumb),\n    onThumbPointerUp: () => (pointerOffsetRef.current = 0),\n    onThumbPointerDown: (pointerPos) => (pointerOffsetRef.current = pointerPos),\n  };\n\n  function getScrollPosition(pointerPos: number, dir?: Direction) {\n    return getScrollPositionFromPointer(pointerPos, pointerOffsetRef.current, sizes, dir);\n  }\n\n  if (orientation === 'horizontal') {\n    return (\n      <ScrollAreaScrollbarX\n        {...commonProps}\n        ref={forwardedRef}\n        onThumbPositionChange={() => {\n          if (context.viewport && thumbRef.current) {\n            const scrollPos = context.viewport.scrollLeft;\n            const offset = getThumbOffsetFromScroll(scrollPos, sizes, context.dir);\n            thumbRef.current.style.transform = `translate3d(${offset}px, 0, 0)`;\n          }\n        }}\n        onWheelScroll={(scrollPos) => {\n          if (context.viewport) context.viewport.scrollLeft = scrollPos;\n        }}\n        onDragScroll={(pointerPos) => {\n          if (context.viewport) {\n            context.viewport.scrollLeft = getScrollPosition(pointerPos, context.dir);\n          }\n        }}\n      />\n    );\n  }\n\n  if (orientation === 'vertical') {\n    return (\n      <ScrollAreaScrollbarY\n        {...commonProps}\n        ref={forwardedRef}\n        onThumbPositionChange={() => {\n          if (context.viewport && thumbRef.current) {\n            const scrollPos = context.viewport.scrollTop;\n            const offset = getThumbOffsetFromScroll(scrollPos, sizes);\n            thumbRef.current.style.transform = `translate3d(0, ${offset}px, 0)`;\n          }\n        }}\n        onWheelScroll={(scrollPos) => {\n          if (context.viewport) context.viewport.scrollTop = scrollPos;\n        }}\n        onDragScroll={(pointerPos) => {\n          if (context.viewport) context.viewport.scrollTop = getScrollPosition(pointerPos);\n        }}\n      />\n    );\n  }\n\n  return null;\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ScrollAreaScrollbarAxisPrivateProps = {\n  hasThumb: boolean;\n  sizes: Sizes;\n  onSizesChange(sizes: Sizes): void;\n  onThumbChange(thumb: ScrollAreaThumbElement | null): void;\n  onThumbPointerDown(pointerPos: number): void;\n  onThumbPointerUp(): void;\n  onThumbPositionChange(): void;\n  onWheelScroll(scrollPos: number): void;\n  onDragScroll(pointerPos: number): void;\n};\n\ntype ScrollAreaScrollbarAxisElement = ScrollAreaScrollbarImplElement;\ninterface ScrollAreaScrollbarAxisProps\n  extends Omit<ScrollAreaScrollbarImplProps, keyof ScrollAreaScrollbarImplPrivateProps>,\n    ScrollAreaScrollbarAxisPrivateProps {}\n\nconst ScrollAreaScrollbarX = React.forwardRef<\n  ScrollAreaScrollbarAxisElement,\n  ScrollAreaScrollbarAxisProps\n>((props: ScopedProps<ScrollAreaScrollbarAxisProps>, forwardedRef) => {\n  const { sizes, onSizesChange, ...scrollbarProps } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const [computedStyle, setComputedStyle] = React.useState<CSSStyleDeclaration>();\n  const ref = React.useRef<ScrollAreaScrollbarAxisElement>(null);\n  const composeRefs = useComposedRefs(forwardedRef, ref, context.onScrollbarXChange);\n\n  React.useEffect(() => {\n    if (ref.current) setComputedStyle(getComputedStyle(ref.current));\n  }, [ref]);\n\n  return (\n    <ScrollAreaScrollbarImpl\n      data-orientation=\"horizontal\"\n      {...scrollbarProps}\n      ref={composeRefs}\n      sizes={sizes}\n      style={{\n        bottom: 0,\n        left: context.dir === 'rtl' ? 'var(--radix-scroll-area-corner-width)' : 0,\n        right: context.dir === 'ltr' ? 'var(--radix-scroll-area-corner-width)' : 0,\n        ['--radix-scroll-area-thumb-width' as any]: getThumbSize(sizes) + 'px',\n        ...props.style,\n      }}\n      onThumbPointerDown={(pointerPos) => props.onThumbPointerDown(pointerPos.x)}\n      onDragScroll={(pointerPos) => props.onDragScroll(pointerPos.x)}\n      onWheelScroll={(event, maxScrollPos) => {\n        if (context.viewport) {\n          const scrollPos = context.viewport.scrollLeft + event.deltaX;\n          props.onWheelScroll(scrollPos);\n          // prevent window scroll when wheeling on scrollbar\n          if (isScrollingWithinScrollbarBounds(scrollPos, maxScrollPos)) {\n            event.preventDefault();\n          }\n        }\n      }}\n      onResize={() => {\n        if (ref.current && context.viewport && computedStyle) {\n          onSizesChange({\n            content: context.viewport.scrollWidth,\n            viewport: context.viewport.offsetWidth,\n            scrollbar: {\n              size: ref.current.clientWidth,\n              paddingStart: toInt(computedStyle.paddingLeft),\n              paddingEnd: toInt(computedStyle.paddingRight),\n            },\n          });\n        }\n      }}\n    />\n  );\n});\n\nconst ScrollAreaScrollbarY = React.forwardRef<\n  ScrollAreaScrollbarAxisElement,\n  ScrollAreaScrollbarAxisProps\n>((props: ScopedProps<ScrollAreaScrollbarAxisProps>, forwardedRef) => {\n  const { sizes, onSizesChange, ...scrollbarProps } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const [computedStyle, setComputedStyle] = React.useState<CSSStyleDeclaration>();\n  const ref = React.useRef<ScrollAreaScrollbarAxisElement>(null);\n  const composeRefs = useComposedRefs(forwardedRef, ref, context.onScrollbarYChange);\n\n  React.useEffect(() => {\n    if (ref.current) setComputedStyle(getComputedStyle(ref.current));\n  }, [ref]);\n\n  return (\n    <ScrollAreaScrollbarImpl\n      data-orientation=\"vertical\"\n      {...scrollbarProps}\n      ref={composeRefs}\n      sizes={sizes}\n      style={{\n        top: 0,\n        right: context.dir === 'ltr' ? 0 : undefined,\n        left: context.dir === 'rtl' ? 0 : undefined,\n        bottom: 'var(--radix-scroll-area-corner-height)',\n        ['--radix-scroll-area-thumb-height' as any]: getThumbSize(sizes) + 'px',\n        ...props.style,\n      }}\n      onThumbPointerDown={(pointerPos) => props.onThumbPointerDown(pointerPos.y)}\n      onDragScroll={(pointerPos) => props.onDragScroll(pointerPos.y)}\n      onWheelScroll={(event, maxScrollPos) => {\n        if (context.viewport) {\n          const scrollPos = context.viewport.scrollTop + event.deltaY;\n          props.onWheelScroll(scrollPos);\n          // prevent window scroll when wheeling on scrollbar\n          if (isScrollingWithinScrollbarBounds(scrollPos, maxScrollPos)) {\n            event.preventDefault();\n          }\n        }\n      }}\n      onResize={() => {\n        if (ref.current && context.viewport && computedStyle) {\n          onSizesChange({\n            content: context.viewport.scrollHeight,\n            viewport: context.viewport.offsetHeight,\n            scrollbar: {\n              size: ref.current.clientHeight,\n              paddingStart: toInt(computedStyle.paddingTop),\n              paddingEnd: toInt(computedStyle.paddingBottom),\n            },\n          });\n        }\n      }}\n    />\n  );\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ScrollbarContext = {\n  hasThumb: boolean;\n  scrollbar: ScrollAreaScrollbarElement | null;\n  onThumbChange(thumb: ScrollAreaThumbElement | null): void;\n  onThumbPointerUp(): void;\n  onThumbPointerDown(pointerPos: { x: number; y: number }): void;\n  onThumbPositionChange(): void;\n};\n\nconst [ScrollbarProvider, useScrollbarContext] =\n  createScrollAreaContext<ScrollbarContext>(SCROLLBAR_NAME);\n\ntype ScrollAreaScrollbarImplElement = React.ElementRef<typeof Primitive.div>;\ntype ScrollAreaScrollbarImplPrivateProps = {\n  sizes: Sizes;\n  hasThumb: boolean;\n  onThumbChange: ScrollbarContext['onThumbChange'];\n  onThumbPointerUp: ScrollbarContext['onThumbPointerUp'];\n  onThumbPointerDown: ScrollbarContext['onThumbPointerDown'];\n  onThumbPositionChange: ScrollbarContext['onThumbPositionChange'];\n  onWheelScroll(event: WheelEvent, maxScrollPos: number): void;\n  onDragScroll(pointerPos: { x: number; y: number }): void;\n  onResize(): void;\n};\ninterface ScrollAreaScrollbarImplProps\n  extends PrimitiveDivProps,\n    ScrollAreaScrollbarImplPrivateProps {}\n\nconst ScrollAreaScrollbarImpl = React.forwardRef<\n  ScrollAreaScrollbarImplElement,\n  ScrollAreaScrollbarImplProps\n>((props: ScopedProps<ScrollAreaScrollbarImplProps>, forwardedRef) => {\n  const {\n    __scopeScrollArea,\n    sizes,\n    hasThumb,\n    onThumbChange,\n    onThumbPointerUp,\n    onThumbPointerDown,\n    onThumbPositionChange,\n    onDragScroll,\n    onWheelScroll,\n    onResize,\n    ...scrollbarProps\n  } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, __scopeScrollArea);\n  const [scrollbar, setScrollbar] = React.useState<ScrollAreaScrollbarElement | null>(null);\n  const composeRefs = useComposedRefs(forwardedRef, (node) => setScrollbar(node));\n  const rectRef = React.useRef<ClientRect | null>(null);\n  const prevWebkitUserSelectRef = React.useRef<string>('');\n  const viewport = context.viewport;\n  const maxScrollPos = sizes.content - sizes.viewport;\n  const handleWheelScroll = useCallbackRef(onWheelScroll);\n  const handleThumbPositionChange = useCallbackRef(onThumbPositionChange);\n  const handleResize = useDebounceCallback(onResize, 10);\n\n  function handleDragScroll(event: React.PointerEvent<HTMLElement>) {\n    if (rectRef.current) {\n      const x = event.clientX - rectRef.current.left;\n      const y = event.clientY - rectRef.current.top;\n      onDragScroll({ x, y });\n    }\n  }\n\n  /**\n   * We bind wheel event imperatively so we can switch off passive\n   * mode for document wheel event to allow it to be prevented\n   */\n  React.useEffect(() => {\n    const handleWheel = (event: WheelEvent) => {\n      const element = event.target as HTMLElement;\n      const isScrollbarWheel = scrollbar?.contains(element);\n      if (isScrollbarWheel) handleWheelScroll(event, maxScrollPos);\n    };\n    document.addEventListener('wheel', handleWheel, { passive: false });\n    return () => document.removeEventListener('wheel', handleWheel, { passive: false } as any);\n  }, [viewport, scrollbar, maxScrollPos, handleWheelScroll]);\n\n  /**\n   * Update thumb position on sizes change\n   */\n  React.useEffect(handleThumbPositionChange, [sizes, handleThumbPositionChange]);\n\n  useResizeObserver(scrollbar, handleResize);\n  useResizeObserver(context.content, handleResize);\n\n  return (\n    <ScrollbarProvider\n      scope={__scopeScrollArea}\n      scrollbar={scrollbar}\n      hasThumb={hasThumb}\n      onThumbChange={useCallbackRef(onThumbChange)}\n      onThumbPointerUp={useCallbackRef(onThumbPointerUp)}\n      onThumbPositionChange={handleThumbPositionChange}\n      onThumbPointerDown={useCallbackRef(onThumbPointerDown)}\n    >\n      <Primitive.div\n        {...scrollbarProps}\n        ref={composeRefs}\n        style={{ position: 'absolute', ...scrollbarProps.style }}\n        onPointerDown={composeEventHandlers(props.onPointerDown, (event) => {\n          const mainPointer = 0;\n          if (event.button === mainPointer) {\n            const element = event.target as HTMLElement;\n            element.setPointerCapture(event.pointerId);\n            rectRef.current = scrollbar!.getBoundingClientRect();\n            // pointer capture doesn't prevent text selection in Safari\n            // so we remove text selection manually when scrolling\n            prevWebkitUserSelectRef.current = document.body.style.webkitUserSelect;\n            document.body.style.webkitUserSelect = 'none';\n            handleDragScroll(event);\n          }\n        })}\n        onPointerMove={composeEventHandlers(props.onPointerMove, handleDragScroll)}\n        onPointerUp={composeEventHandlers(props.onPointerUp, (event) => {\n          const element = event.target as HTMLElement;\n          element.releasePointerCapture(event.pointerId);\n          document.body.style.webkitUserSelect = prevWebkitUserSelectRef.current;\n          rectRef.current = null;\n        })}\n      />\n    </ScrollbarProvider>\n  );\n});\n\n/* -------------------------------------------------------------------------------------------------\n * ScrollAreaThumb\n * -----------------------------------------------------------------------------------------------*/\n\nconst THUMB_NAME = 'ScrollAreaThumb';\n\ntype ScrollAreaThumbElement = ScrollAreaThumbImplElement;\ninterface ScrollAreaThumbProps extends ScrollAreaThumbImplProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst ScrollAreaThumb = React.forwardRef<ScrollAreaThumbElement, ScrollAreaThumbProps>(\n  (props: ScopedProps<ScrollAreaThumbProps>, forwardedRef) => {\n    const { forceMount, ...thumbProps } = props;\n    const scrollbarContext = useScrollbarContext(THUMB_NAME, props.__scopeScrollArea);\n    return (\n      <Presence present={forceMount || scrollbarContext.hasThumb}>\n        <ScrollAreaThumbImpl ref={forwardedRef} {...thumbProps} />\n      </Presence>\n    );\n  }\n);\n\ntype ScrollAreaThumbImplElement = React.ElementRef<typeof Primitive.div>;\ninterface ScrollAreaThumbImplProps extends PrimitiveDivProps {}\n\nconst ScrollAreaThumbImpl = React.forwardRef<ScrollAreaThumbImplElement, ScrollAreaThumbImplProps>(\n  (props: ScopedProps<ScrollAreaThumbImplProps>, forwardedRef) => {\n    const { __scopeScrollArea, style, ...thumbProps } = props;\n    const scrollAreaContext = useScrollAreaContext(THUMB_NAME, __scopeScrollArea);\n    const scrollbarContext = useScrollbarContext(THUMB_NAME, __scopeScrollArea);\n    const { onThumbPositionChange } = scrollbarContext;\n    const composedRef = useComposedRefs(forwardedRef, (node) =>\n      scrollbarContext.onThumbChange(node)\n    );\n    const removeUnlinkedScrollListenerRef = React.useRef<() => void>();\n    const debounceScrollEnd = useDebounceCallback(() => {\n      if (removeUnlinkedScrollListenerRef.current) {\n        removeUnlinkedScrollListenerRef.current();\n        removeUnlinkedScrollListenerRef.current = undefined;\n      }\n    }, 100);\n\n    React.useEffect(() => {\n      const viewport = scrollAreaContext.viewport;\n      if (viewport) {\n        /**\n         * We only bind to native scroll event so we know when scroll starts and ends.\n         * When scroll starts we start a requestAnimationFrame loop that checks for\n         * changes to scroll position. That rAF loop triggers our thumb position change\n         * when relevant to avoid scroll-linked effects. We cancel the loop when scroll ends.\n         * https://developer.mozilla.org/en-US/docs/Mozilla/Performance/Scroll-linked_effects\n         */\n        const handleScroll = () => {\n          debounceScrollEnd();\n          if (!removeUnlinkedScrollListenerRef.current) {\n            const listener = addUnlinkedScrollListener(viewport, onThumbPositionChange);\n            removeUnlinkedScrollListenerRef.current = listener;\n            onThumbPositionChange();\n          }\n        };\n        onThumbPositionChange();\n        viewport.addEventListener('scroll', handleScroll);\n        return () => viewport.removeEventListener('scroll', handleScroll);\n      }\n    }, [scrollAreaContext.viewport, debounceScrollEnd, onThumbPositionChange]);\n\n    return (\n      <Primitive.div\n        data-state={scrollbarContext.hasThumb ? 'visible' : 'hidden'}\n        {...thumbProps}\n        ref={composedRef}\n        style={{\n          width: 'var(--radix-scroll-area-thumb-width)',\n          height: 'var(--radix-scroll-area-thumb-height)',\n          ...style,\n        }}\n        onPointerDownCapture={composeEventHandlers(props.onPointerDownCapture, (event) => {\n          const thumb = event.target as HTMLElement;\n          const thumbRect = thumb.getBoundingClientRect();\n          const x = event.clientX - thumbRect.left;\n          const y = event.clientY - thumbRect.top;\n          scrollbarContext.onThumbPointerDown({ x, y });\n        })}\n        onPointerUp={composeEventHandlers(props.onPointerUp, scrollbarContext.onThumbPointerUp)}\n      />\n    );\n  }\n);\n\nScrollAreaThumb.displayName = THUMB_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ScrollAreaCorner\n * -----------------------------------------------------------------------------------------------*/\n\nconst CORNER_NAME = 'ScrollAreaCorner';\n\ntype ScrollAreaCornerElement = ScrollAreaCornerImplElement;\ninterface ScrollAreaCornerProps extends ScrollAreaCornerImplProps {}\n\nconst ScrollAreaCorner = React.forwardRef<ScrollAreaCornerElement, ScrollAreaCornerProps>(\n  (props: ScopedProps<ScrollAreaCornerProps>, forwardedRef) => {\n    const context = useScrollAreaContext(CORNER_NAME, props.__scopeScrollArea);\n    const hasBothScrollbarsVisible = Boolean(context.scrollbarX && context.scrollbarY);\n    const hasCorner = context.type !== 'scroll' && hasBothScrollbarsVisible;\n    return hasCorner ? <ScrollAreaCornerImpl {...props} ref={forwardedRef} /> : null;\n  }\n);\n\nScrollAreaCorner.displayName = CORNER_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ScrollAreaCornerImplElement = React.ElementRef<typeof Primitive.div>;\ninterface ScrollAreaCornerImplProps extends PrimitiveDivProps {}\n\nconst ScrollAreaCornerImpl = React.forwardRef<\n  ScrollAreaCornerImplElement,\n  ScrollAreaCornerImplProps\n>((props: ScopedProps<ScrollAreaCornerImplProps>, forwardedRef) => {\n  const { __scopeScrollArea, ...cornerProps } = props;\n  const context = useScrollAreaContext(CORNER_NAME, __scopeScrollArea);\n  const [width, setWidth] = React.useState(0);\n  const [height, setHeight] = React.useState(0);\n  const hasSize = Boolean(width && height);\n\n  useResizeObserver(context.scrollbarX, () => {\n    const height = context.scrollbarX?.offsetHeight || 0;\n    context.onCornerHeightChange(height);\n    setHeight(height);\n  });\n\n  useResizeObserver(context.scrollbarY, () => {\n    const width = context.scrollbarY?.offsetWidth || 0;\n    context.onCornerWidthChange(width);\n    setWidth(width);\n  });\n\n  return hasSize ? (\n    <Primitive.div\n      {...cornerProps}\n      ref={forwardedRef}\n      style={{\n        width,\n        height,\n        position: 'absolute',\n        right: context.dir === 'ltr' ? 0 : undefined,\n        left: context.dir === 'rtl' ? 0 : undefined,\n        bottom: 0,\n        ...props.style,\n      }}\n    />\n  ) : null;\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction toInt(value?: string) {\n  return value ? parseInt(value, 10) : 0;\n}\n\nfunction getThumbRatio(viewportSize: number, contentSize: number) {\n  const ratio = viewportSize / contentSize;\n  return isNaN(ratio) ? 0 : ratio;\n}\n\nfunction getThumbSize(sizes: Sizes) {\n  const ratio = getThumbRatio(sizes.viewport, sizes.content);\n  const scrollbarPadding = sizes.scrollbar.paddingStart + sizes.scrollbar.paddingEnd;\n  const thumbSize = (sizes.scrollbar.size - scrollbarPadding) * ratio;\n  // minimum of 18 matches macOS minimum\n  return Math.max(thumbSize, 18);\n}\n\nfunction getScrollPositionFromPointer(\n  pointerPos: number,\n  pointerOffset: number,\n  sizes: Sizes,\n  dir: Direction = 'ltr'\n) {\n  const thumbSizePx = getThumbSize(sizes);\n  const thumbCenter = thumbSizePx / 2;\n  const offset = pointerOffset || thumbCenter;\n  const thumbOffsetFromEnd = thumbSizePx - offset;\n  const minPointerPos = sizes.scrollbar.paddingStart + offset;\n  const maxPointerPos = sizes.scrollbar.size - sizes.scrollbar.paddingEnd - thumbOffsetFromEnd;\n  const maxScrollPos = sizes.content - sizes.viewport;\n  const scrollRange = dir === 'ltr' ? [0, maxScrollPos] : [maxScrollPos * -1, 0];\n  const interpolate = linearScale([minPointerPos, maxPointerPos], scrollRange as [number, number]);\n  return interpolate(pointerPos);\n}\n\nfunction getThumbOffsetFromScroll(scrollPos: number, sizes: Sizes, dir: Direction = 'ltr') {\n  const thumbSizePx = getThumbSize(sizes);\n  const scrollbarPadding = sizes.scrollbar.paddingStart + sizes.scrollbar.paddingEnd;\n  const scrollbar = sizes.scrollbar.size - scrollbarPadding;\n  const maxScrollPos = sizes.content - sizes.viewport;\n  const maxThumbPos = scrollbar - thumbSizePx;\n  const scrollClampRange = dir === 'ltr' ? [0, maxScrollPos] : [maxScrollPos * -1, 0];\n  const scrollWithoutMomentum = clamp(scrollPos, scrollClampRange as [number, number]);\n  const interpolate = linearScale([0, maxScrollPos], [0, maxThumbPos]);\n  return interpolate(scrollWithoutMomentum);\n}\n\n// https://github.com/tmcw-up-for-adoption/simple-linear-scale/blob/master/index.js\nfunction linearScale(input: readonly [number, number], output: readonly [number, number]) {\n  return (value: number) => {\n    if (input[0] === input[1] || output[0] === output[1]) return output[0];\n    const ratio = (output[1] - output[0]) / (input[1] - input[0]);\n    return output[0] + ratio * (value - input[0]);\n  };\n}\n\nfunction isScrollingWithinScrollbarBounds(scrollPos: number, maxScrollPos: number) {\n  return scrollPos > 0 && scrollPos < maxScrollPos;\n}\n\n// Custom scroll handler to avoid scroll-linked effects\n// https://developer.mozilla.org/en-US/docs/Mozilla/Performance/Scroll-linked_effects\nconst addUnlinkedScrollListener = (node: HTMLElement, handler = () => {}) => {\n  let prevPosition = { left: node.scrollLeft, top: node.scrollTop };\n  let rAF = 0;\n  (function loop() {\n    const position = { left: node.scrollLeft, top: node.scrollTop };\n    const isHorizontalScroll = prevPosition.left !== position.left;\n    const isVerticalScroll = prevPosition.top !== position.top;\n    if (isHorizontalScroll || isVerticalScroll) handler();\n    prevPosition = position;\n    rAF = window.requestAnimationFrame(loop);\n  })();\n  return () => window.cancelAnimationFrame(rAF);\n};\n\nfunction useDebounceCallback(callback: () => void, delay: number) {\n  const handleCallback = useCallbackRef(callback);\n  const debounceTimerRef = React.useRef(0);\n  React.useEffect(() => () => window.clearTimeout(debounceTimerRef.current), []);\n  return React.useCallback(() => {\n    window.clearTimeout(debounceTimerRef.current);\n    debounceTimerRef.current = window.setTimeout(handleCallback, delay);\n  }, [handleCallback, delay]);\n}\n\nfunction useResizeObserver(element: HTMLElement | null, onResize: () => void) {\n  const handleResize = useCallbackRef(onResize);\n  useLayoutEffect(() => {\n    let rAF = 0;\n    if (element) {\n      /**\n       * Resize Observer will throw an often benign error that says `ResizeObserver loop\n       * completed with undelivered notifications`. This means that ResizeObserver was not\n       * able to deliver all observations within a single animation frame, so we use\n       * `requestAnimationFrame` to ensure we don't deliver unnecessary observations.\n       * Further reading: https://github.com/WICG/resize-observer/issues/38\n       */\n      const resizeObserver = new ResizeObserver(() => {\n        cancelAnimationFrame(rAF);\n        rAF = window.requestAnimationFrame(handleResize);\n      });\n      resizeObserver.observe(element);\n      return () => {\n        window.cancelAnimationFrame(rAF);\n        resizeObserver.unobserve(element);\n      };\n    }\n  }, [element, handleResize]);\n}\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst Root = ScrollArea;\nconst Viewport = ScrollAreaViewport;\nconst Scrollbar = ScrollAreaScrollbar;\nconst Thumb = ScrollAreaThumb;\nconst Corner = ScrollAreaCorner;\n\nexport {\n  createScrollAreaScope,\n  //\n  ScrollArea,\n  ScrollAreaViewport,\n  ScrollAreaScrollbar,\n  ScrollAreaThumb,\n  ScrollAreaCorner,\n  //\n  Root,\n  Viewport,\n  Scrollbar,\n  Thumb,\n  Corner,\n};\nexport type {\n  ScrollAreaProps,\n  ScrollAreaViewportProps,\n  ScrollAreaScrollbarProps,\n  ScrollAreaThumbProps,\n  ScrollAreaCornerProps,\n};\n","import * as React from 'react';\n\ntype Machine<S> = { [k: string]: { [k: string]: S } };\ntype MachineState<T> = keyof T;\ntype MachineEvent<T> = keyof UnionToIntersection<T[keyof T]>;\n\n// 🤯 https://fettblog.eu/typescript-union-to-intersection/\ntype UnionToIntersection<T> = (T extends any ? (x: T) => any : never) extends (x: infer R) => any\n  ? R\n  : never;\n\nexport function useStateMachine<M>(\n  initialState: MachineState<M>,\n  machine: M & Machine<MachineState<M>>\n) {\n  return React.useReducer((state: MachineState<M>, event: MachineEvent<M>): MachineState<M> => {\n    const nextState = (machine[state] as any)[event];\n    return nextState ?? state;\n  }, initialState);\n}\n"]},"metadata":{},"sourceType":"module"}