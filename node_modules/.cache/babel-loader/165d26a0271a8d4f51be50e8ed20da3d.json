{"ast":null,"code":"import { createStyles } from '@mantine/styles';\nconst sizes = {\n  xs: 1,\n  sm: 2,\n  md: 3,\n  lg: 4,\n  xl: 5\n};\n\nfunction getColor(theme, color) {\n  const themeColor = theme.fn.variant({\n    variant: \"outline\",\n    color\n  }).border;\n  return typeof color === \"string\" && (color in theme.colors || color.split(\".\")[0] in theme.colors) ? themeColor : color === void 0 ? theme.colorScheme === \"dark\" ? theme.colors.dark[4] : theme.colors.gray[4] : color;\n}\n\nvar useStyles = createStyles((theme, {\n  size,\n  variant,\n  color\n}) => ({\n  root: {},\n  withLabel: {\n    borderTop: \"0 !important\"\n  },\n  left: {\n    \"&::before\": {\n      display: \"none\"\n    }\n  },\n  right: {\n    \"&::after\": {\n      display: \"none\"\n    }\n  },\n  label: {\n    display: \"flex\",\n    alignItems: \"center\",\n    \"&::before\": {\n      content: '\"\"',\n      flex: 1,\n      height: 1,\n      borderTop: `${theme.fn.size({\n        size,\n        sizes\n      })}px ${variant} ${getColor(theme, color)}`,\n      marginRight: theme.spacing.xs\n    },\n    \"&::after\": {\n      content: '\"\"',\n      flex: 1,\n      borderTop: `${theme.fn.size({\n        size,\n        sizes\n      })}px ${variant} ${getColor(theme, color)}`,\n      marginLeft: theme.spacing.xs\n    }\n  },\n  labelDefaultStyles: {\n    color: color === \"dark\" ? theme.colors.dark[1] : theme.fn.themeColor(color, theme.colorScheme === \"dark\" ? 5 : theme.fn.primaryShade(), false)\n  },\n  horizontal: {\n    border: 0,\n    borderTopWidth: theme.fn.size({\n      size,\n      sizes\n    }),\n    borderTopColor: getColor(theme, color),\n    borderTopStyle: variant,\n    margin: 0\n  },\n  vertical: {\n    border: 0,\n    alignSelf: \"stretch\",\n    height: \"auto\",\n    borderLeftWidth: theme.fn.size({\n      size,\n      sizes\n    }),\n    borderLeftColor: getColor(theme, color),\n    borderLeftStyle: variant\n  }\n}));\nexport default useStyles;","map":{"version":3,"sources":["../../src/Divider/Divider.styles.ts"],"names":[],"mappings":"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","sourcesContent":["import { createStyles, MantineNumberSize, MantineColor, MantineTheme } from '@mantine/styles';\n\nexport interface DividerStylesParams {\n  size: MantineNumberSize;\n  variant: 'solid' | 'dashed' | 'dotted';\n  color: MantineColor;\n}\n\nconst sizes = {\n  xs: 1,\n  sm: 2,\n  md: 3,\n  lg: 4,\n  xl: 5,\n};\n\nfunction getColor(theme: MantineTheme, color: MantineColor) {\n  const themeColor = theme.fn.variant({ variant: 'outline', color }).border;\n\n  return typeof color === 'string' && (color in theme.colors || color.split('.')[0] in theme.colors)\n    ? themeColor\n    : color === undefined\n    ? theme.colorScheme === 'dark'\n      ? theme.colors.dark[4]\n      : theme.colors.gray[4]\n    : color;\n}\n\nexport default createStyles((theme, { size, variant, color }: DividerStylesParams) => ({\n  root: {},\n\n  withLabel: {\n    borderTop: '0 !important',\n  },\n\n  left: {\n    '&::before': {\n      display: 'none',\n    },\n  },\n\n  right: {\n    '&::after': {\n      display: 'none',\n    },\n  },\n\n  label: {\n    display: 'flex',\n    alignItems: 'center',\n\n    '&::before': {\n      content: '\"\"',\n      flex: 1,\n      height: 1,\n      borderTop: `${theme.fn.size({ size, sizes })}px ${variant} ${getColor(theme, color)}`,\n      marginRight: theme.spacing.xs,\n    },\n\n    '&::after': {\n      content: '\"\"',\n      flex: 1,\n      borderTop: `${theme.fn.size({ size, sizes })}px ${variant} ${getColor(theme, color)}`,\n      marginLeft: theme.spacing.xs,\n    },\n  },\n\n  labelDefaultStyles: {\n    color:\n      color === 'dark'\n        ? theme.colors.dark[1]\n        : theme.fn.themeColor(\n            color,\n            theme.colorScheme === 'dark' ? 5 : theme.fn.primaryShade(),\n            false\n          ),\n  },\n\n  horizontal: {\n    border: 0,\n    borderTopWidth: theme.fn.size({ size, sizes }),\n    borderTopColor: getColor(theme, color),\n    borderTopStyle: variant,\n    margin: 0,\n  },\n\n  vertical: {\n    border: 0,\n    alignSelf: 'stretch',\n    height: 'auto',\n    borderLeftWidth: theme.fn.size({ size, sizes }),\n    borderLeftColor: getColor(theme, color),\n    borderLeftStyle: variant,\n  },\n}));\n"]},"metadata":{},"sourceType":"module"}