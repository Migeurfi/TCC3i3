{"ast":null,"code":"import { useCss } from './use-css.js';\nimport { useMantineTheme, useMantineProviderStyles } from '../theme/MantineProvider.js';\nimport { mergeClassNames } from './utils/merge-class-names/merge-class-names.js';\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nfunction createRef(refName) {\n  return `__mantine-ref-${refName || \"\"}`;\n}\n\nfunction getStyles(styles, theme, params) {\n  const extractStyles = stylesPartial => typeof stylesPartial === \"function\" ? stylesPartial(theme, params || {}) : stylesPartial || {};\n\n  if (Array.isArray(styles)) {\n    return styles.map(item => extractStyles(item.styles)).reduce((acc, item) => {\n      Object.keys(item).forEach(key => {\n        if (!acc[key]) {\n          acc[key] = __spreadValues({}, item[key]);\n        } else {\n          acc[key] = __spreadValues(__spreadValues({}, acc[key]), item[key]);\n        }\n      });\n      return acc;\n    }, {});\n  }\n\n  return extractStyles(styles);\n}\n\nfunction createStyles(input) {\n  const getCssObject = typeof input === \"function\" ? input : () => input;\n\n  function useStyles(params, options) {\n    const theme = useMantineTheme();\n    const context = useMantineProviderStyles(options == null ? void 0 : options.name);\n    const {\n      css,\n      cx\n    } = useCss();\n    const cssObject = getCssObject(theme, params, createRef);\n    const componentStyles = getStyles(options == null ? void 0 : options.styles, theme, params);\n    const providerStyles = getStyles(context, theme, params);\n    const classes = Object.fromEntries(Object.keys(cssObject).map(key => {\n      const mergedStyles = cx({\n        [css(cssObject[key])]: !(options == null ? void 0 : options.unstyled)\n      }, css(providerStyles[key]), css(componentStyles[key]));\n      return [key, mergedStyles];\n    }));\n    return {\n      classes: mergeClassNames({\n        cx,\n        classes,\n        context,\n        classNames: options == null ? void 0 : options.classNames,\n        name: options == null ? void 0 : options.name\n      }),\n      cx,\n      theme\n    };\n  }\n\n  return useStyles;\n}\n\nexport { createStyles };","map":{"version":3,"sources":["../../src/tss/create-styles.ts"],"names":[],"mappings":"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","sourcesContent":["import type { MantineTheme } from '../theme';\nimport type { CSSObject } from './types';\nimport { useCss } from './use-css';\nimport { useMantineTheme, useMantineProviderStyles } from '../theme/MantineProvider';\nimport { mergeClassNames } from './utils/merge-class-names/merge-class-names';\n\ntype ContextStyles = ReturnType<typeof useMantineProviderStyles>;\n\nexport interface UseStylesOptions<Key extends string> {\n  classNames?: Partial<Record<Key, string>>;\n  styles?:\n    | Partial<Record<Key, CSSObject>>\n    | ((theme: MantineTheme, params: Record<string, any>) => Partial<Record<Key, CSSObject>>);\n  name: string | string[];\n  unstyled?: boolean;\n}\n\nfunction createRef(refName: string) {\n  return `__mantine-ref-${refName || ''}`;\n}\n\nfunction getStyles<Key extends string>(\n  styles: UseStylesOptions<Key>['styles'] | ContextStyles,\n  theme: MantineTheme,\n  params: Record<string, any>\n): CSSObject {\n  const extractStyles = (stylesPartial: UseStylesOptions<Key>['styles']) =>\n    typeof stylesPartial === 'function' ? stylesPartial(theme, params || {}) : stylesPartial || {};\n\n  if (Array.isArray(styles)) {\n    return styles\n      .map((item) => extractStyles(item.styles))\n      .reduce<Record<string, CSSObject>>((acc, item) => {\n        Object.keys(item).forEach((key) => {\n          if (!acc[key]) {\n            acc[key] = { ...item[key] };\n          } else {\n            acc[key] = { ...acc[key], ...item[key] };\n          }\n        });\n        return acc;\n      }, {});\n  }\n\n  return extractStyles(styles);\n}\n\nexport function createStyles<Key extends string = string, Params = void>(\n  input:\n    | ((\n        theme: MantineTheme,\n        params: Params,\n        createRef: (refName: string) => string\n      ) => Record<Key, CSSObject>)\n    | Record<Key, CSSObject>\n) {\n  const getCssObject = typeof input === 'function' ? input : () => input;\n\n  function useStyles(params: Params, options?: UseStylesOptions<Key>) {\n    const theme = useMantineTheme();\n    const context = useMantineProviderStyles(options?.name);\n\n    const { css, cx } = useCss();\n    const cssObject = getCssObject(theme, params, createRef);\n\n    const componentStyles = getStyles(options?.styles, theme, params);\n    const providerStyles = getStyles(context, theme, params);\n\n    const classes = Object.fromEntries(\n      Object.keys(cssObject).map((key) => {\n        const mergedStyles = cx(\n          { [css(cssObject[key])]: !options?.unstyled },\n          css(providerStyles[key]),\n          css(componentStyles[key])\n        );\n        return [key, mergedStyles];\n      })\n    ) as Record<Key, string>;\n\n    return {\n      classes: mergeClassNames({\n        cx,\n        classes,\n        context,\n        classNames: options?.classNames,\n        name: options?.name,\n      }),\n      cx,\n      theme,\n    };\n  }\n\n  return useStyles;\n}\n"]},"metadata":{},"sourceType":"module"}