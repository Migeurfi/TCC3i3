{"ast":null,"code":"import { useQueue, randomId } from '@mantine/hooks';\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\nfunction useNotificationsState({\n  limit\n}) {\n  const {\n    state,\n    queue,\n    update,\n    cleanQueue\n  } = useQueue({\n    initialValues: [],\n    limit\n  });\n\n  const showNotification = notification => {\n    const id = notification.id || randomId();\n    update(notifications => {\n      if (notification.id && notifications.some(n => n.id === notification.id)) {\n        return notifications;\n      }\n\n      return [...notifications, __spreadProps(__spreadValues({}, notification), {\n        id\n      })];\n    });\n    return id;\n  };\n\n  const updateNotification = notification => update(notifications => {\n    const index = notifications.findIndex(n => n.id === notification.id);\n\n    if (index === -1) {\n      return notifications;\n    }\n\n    const newNotifications = [...notifications];\n    newNotifications[index] = notification;\n    return newNotifications;\n  });\n\n  const hideNotification = id => update(notifications => notifications.filter(notification => {\n    if (notification.id === id) {\n      typeof notification.onClose === \"function\" && notification.onClose(notification);\n      return false;\n    }\n\n    return true;\n  }));\n\n  const clean = () => update(() => []);\n\n  return {\n    notifications: state,\n    queue,\n    showNotification,\n    updateNotification,\n    hideNotification,\n    cleanQueue,\n    clean\n  };\n}\n\nexport default useNotificationsState;","map":{"version":3,"sources":["../../../src/NotificationsProvider/use-notifications-state/use-notifications-state.ts"],"names":[],"mappings":"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","sourcesContent":["import { useQueue, randomId } from '@mantine/hooks';\nimport { NotificationProps } from '../../types';\n\nexport default function useNotificationsState({ limit }: { limit: number }) {\n  const { state, queue, update, cleanQueue } = useQueue<NotificationProps>({\n    initialValues: [],\n    limit,\n  });\n\n  const showNotification = (notification: NotificationProps) => {\n    const id = notification.id || randomId();\n\n    update((notifications) => {\n      if (notification.id && notifications.some((n) => n.id === notification.id)) {\n        return notifications;\n      }\n\n      return [...notifications, { ...notification, id }];\n    });\n\n    return id;\n  };\n\n  const updateNotification = (notification: NotificationProps) =>\n    update((notifications) => {\n      const index = notifications.findIndex((n) => n.id === notification.id);\n\n      if (index === -1) {\n        return notifications;\n      }\n\n      const newNotifications = [...notifications];\n      newNotifications[index] = notification;\n\n      return newNotifications;\n    });\n\n  const hideNotification = (id: string) =>\n    update((notifications) =>\n      notifications.filter((notification) => {\n        if (notification.id === id) {\n          typeof notification.onClose === 'function' && notification.onClose(notification);\n          return false;\n        }\n\n        return true;\n      })\n    );\n\n  const clean = () => update(() => []);\n\n  return {\n    notifications: state,\n    queue,\n    showNotification,\n    updateNotification,\n    hideNotification,\n    cleanQueue,\n    clean,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}