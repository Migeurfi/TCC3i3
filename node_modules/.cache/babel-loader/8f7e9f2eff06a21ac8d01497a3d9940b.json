{"ast":null,"code":"import React, { useState } from 'react';\nimport { useIsomorphicEffect } from '../use-isomorphic-effect/use-isomorphic-effect.js';\n\nconst randomId = () => `mantine-${Math.random().toString(36).slice(2, 11)}`;\n\nconst useReactId = React[\"useId\".toString()] || (() => void 0);\n\nfunction useClientId() {\n  const [uuid, setUuid] = useState(\"\");\n  useIsomorphicEffect(() => {\n    setUuid(randomId());\n  }, []);\n  return uuid;\n}\n\nfunction getReactId() {\n  const id = useReactId();\n  return id ? `mantine-${id.replace(/:/g, \"\")}` : \"\";\n}\n\nfunction useId(staticId) {\n  return typeof staticId === \"string\" ? staticId : getReactId() || useClientId();\n}\n\nexport { useId };","map":{"version":3,"sources":["../../src/use-id/use-id.ts"],"names":[],"mappings":";;;AAEA,MAAM,QAAQ,GAAG,MAAO,WAAU,IAAI,CAAC,MAAL,GAAc,QAAd,CAAuB,EAAvB,EAA2B,KAA3B,CAAiC,CAAjC,EAAoC,EAApC,CAAwC,EAA1E;;AACA,MAAM,UAAU,GAAG,KAAK,CAAC,QAAQ,QAAR,EAAD,CAAL,KAA8B,MAAM,KAAK,CAAzC,CAAnB;;AACA,SAAS,WAAT,GAAuB;AACrB,QAAM,CAAC,IAAD,EAAO,OAAP,IAAkB,QAAQ,CAAC,EAAD,CAAhC;AACA,EAAA,mBAAmB,CAAC,MAAM;AACxB,IAAA,OAAO,CAAC,QAAQ,EAAT,CAAP;AACD,GAFkB,EAEhB,EAFgB,CAAnB;AAGA,SAAO,IAAP;AACD;;AACD,SAAS,UAAT,GAAsB;AACpB,QAAM,EAAE,GAAG,UAAU,EAArB;AACA,SAAO,EAAE,GAAI,WAAU,EAAE,CAAC,OAAH,CAAW,IAAX,EAAiB,EAAjB,CAAqB,EAAnC,GAAuC,EAAhD;AACD;;AACM,SAAS,KAAT,CAAe,QAAf,EAAyB;AAC9B,SAAO,OAAO,QAAP,KAAoB,QAApB,GAA+B,QAA/B,GAA0C,UAAU,MAAM,WAAW,EAA5E;AACF","sourcesContent":["import React, { useState } from 'react';\nimport { useIsomorphicEffect } from '../use-isomorphic-effect/use-isomorphic-effect';\n\nconst randomId = () => `mantine-${Math.random().toString(36).slice(2, 11)}`;\n\nconst useReactId: () => string | undefined =\n  (React as any)['useId'.toString()] || (() => undefined);\n\nfunction useClientId() {\n  const [uuid, setUuid] = useState('');\n\n  useIsomorphicEffect(() => {\n    setUuid(randomId());\n  }, []);\n\n  return uuid;\n}\n\nfunction getReactId() {\n  const id = useReactId();\n  return id ? `mantine-${id.replace(/:/g, '')}` : '';\n}\n\nexport function useId(staticId?: string) {\n  return typeof staticId === 'string' ? staticId : getReactId() || useClientId();\n}\n"]},"metadata":{},"sourceType":"module"}