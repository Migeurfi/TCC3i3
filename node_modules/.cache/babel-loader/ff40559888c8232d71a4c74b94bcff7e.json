{"ast":null,"code":"import { useState, useRef, useEffect } from 'react';\n\nfunction useInterval(fn, interval) {\n  const [active, setActive] = useState(false);\n  const intervalRef = useRef();\n  const fnRef = useRef();\n  useEffect(() => {\n    fnRef.current = fn;\n  }, [fn]);\n\n  const start = () => {\n    setActive(old => {\n      if (!old && !intervalRef.current) {\n        intervalRef.current = window.setInterval(fnRef.current, interval);\n      }\n\n      return true;\n    });\n  };\n\n  const stop = () => {\n    setActive(false);\n    window.clearInterval(intervalRef.current);\n    intervalRef.current = void 0;\n  };\n\n  const toggle = () => {\n    if (active) {\n      stop();\n    } else {\n      start();\n    }\n  };\n\n  return {\n    start,\n    stop,\n    toggle,\n    active\n  };\n}\n\nexport { useInterval };","map":{"version":3,"sources":["../../src/use-interval/use-interval.ts"],"names":[],"mappings":";;AACO,SAAS,WAAT,CAAqB,EAArB,EAAyB,QAAzB,EAAmC;AACxC,QAAM,CAAC,MAAD,EAAS,SAAT,IAAsB,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,WAAW,GAAG,MAAM,EAA1B;AACA,QAAM,KAAK,GAAG,MAAM,EAApB;AACA,EAAA,SAAS,CAAC,MAAM;AACd,IAAA,KAAK,CAAC,OAAN,GAAgB,EAAhB;AACD,GAFQ,EAEN,CAAC,EAAD,CAFM,CAAT;;AAGA,QAAM,KAAK,GAAG,MAAM;AAClB,IAAA,SAAS,CAAE,GAAD,IAAS;AACjB,UAAI,CAAC,GAAD,IAAQ,CAAC,WAAW,CAAC,OAAzB,EAAkC;AAChC,QAAA,WAAW,CAAC,OAAZ,GAAsB,MAAM,CAAC,WAAP,CAAmB,KAAK,CAAC,OAAzB,EAAkC,QAAlC,CAAtB;AACD;;AACD,aAAO,IAAP;AACD,KALQ,CAAT;AAMD,GAPD;;AAQA,QAAM,IAAI,GAAG,MAAM;AACjB,IAAA,SAAS,CAAC,KAAD,CAAT;AACA,IAAA,MAAM,CAAC,aAAP,CAAqB,WAAW,CAAC,OAAjC;AACA,IAAA,WAAW,CAAC,OAAZ,GAAsB,KAAK,CAA3B;AACD,GAJD;;AAKA,QAAM,MAAM,GAAG,MAAM;AACnB,QAAI,MAAJ,EAAY;AACV,MAAA,IAAI;AACL,KAFD,MAEO;AACL,MAAA,KAAK;AACN;AACF,GAND;;AAOA,SAAO;AAAE,IAAA,KAAF;AAAS,IAAA,IAAT;AAAe,IAAA,MAAf;AAAuB,IAAA;AAAvB,GAAP;AACF","sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\nexport function useInterval(fn: () => void, interval: number) {\n  const [active, setActive] = useState(false);\n  const intervalRef = useRef<number>();\n  const fnRef = useRef<() => void>();\n\n  useEffect(() => {\n    fnRef.current = fn;\n  }, [fn]);\n\n  const start = () => {\n    setActive((old) => {\n      if (!old && !intervalRef.current) {\n        intervalRef.current = window.setInterval(fnRef.current, interval);\n      }\n      return true;\n    });\n  };\n\n  const stop = () => {\n    setActive(false);\n    window.clearInterval(intervalRef.current);\n    intervalRef.current = undefined;\n  };\n\n  const toggle = () => {\n    if (active) {\n      stop();\n    } else {\n      start();\n    }\n  };\n\n  return { start, stop, toggle, active };\n}\n"]},"metadata":{},"sourceType":"module"}