{"ast":null,"code":"function mergeClassNames({\n  cx,\n  classes,\n  context,\n  classNames,\n  name\n}) {\n  const contextClassNames = context.reduce((acc, item) => {\n    Object.keys(item.classNames).forEach(key => {\n      if (typeof acc[key] !== \"string\") {\n        acc[key] = `${item.classNames[key]}`;\n      } else {\n        acc[key] = `${acc[key]} ${item.classNames[key]}`;\n      }\n    });\n    return acc;\n  }, {});\n  return Object.keys(classes).reduce((acc, className) => {\n    acc[className] = cx(classes[className], contextClassNames[className], classNames != null && classNames[className], Array.isArray(name) ? name.filter(Boolean).map(part => `mantine-${part}-${className}`).join(\" \") : name ? `mantine-${name}-${className}` : null);\n    return acc;\n  }, {});\n}\n\nexport { mergeClassNames };","map":{"version":3,"sources":["../../../../src/tss/utils/merge-class-names/merge-class-names.ts"],"names":[],"mappings":"AAAO,SAAS,eAAT,CAAyB;AAC9B,EAAA,EAD8B;AAE9B,EAAA,OAF8B;AAG9B,EAAA,OAH8B;AAI9B,EAAA,UAJ8B;AAK9B,EAAA;AAL8B,CAAzB,EAMJ;AACD,QAAM,iBAAiB,GAAG,OAAO,CAAC,MAAR,CAAe,CAAC,GAAD,EAAM,IAAN,KAAe;AACtD,IAAA,MAAM,CAAC,IAAP,CAAY,IAAI,CAAC,UAAjB,EAA6B,OAA7B,CAAsC,GAAD,IAAS;AAC5C,UAAI,OAAO,GAAG,CAAC,GAAD,CAAV,KAAoB,QAAxB,EAAkC;AAChC,QAAA,GAAG,CAAC,GAAD,CAAH,GAAY,GAAE,IAAI,CAAC,UAAL,CAAgB,GAAhB,CAAqB,EAAnC;AACD,OAFD,MAEO;AACL,QAAA,GAAG,CAAC,GAAD,CAAH,GAAY,GAAE,GAAG,CAAC,GAAD,CAAM,IAAG,IAAI,CAAC,UAAL,CAAgB,GAAhB,CAAqB,EAA/C;AACD;AACF,KAND;AAOA,WAAO,GAAP;AACD,GATyB,EASvB,EATuB,CAA1B;AAUA,SAAO,MAAM,CAAC,IAAP,CAAY,OAAZ,EAAqB,MAArB,CAA4B,CAAC,GAAD,EAAM,SAAN,KAAoB;AACrD,IAAA,GAAG,CAAC,SAAD,CAAH,GAAiB,EAAE,CAAC,OAAO,CAAC,SAAD,CAAR,EAAqB,iBAAiB,CAAC,SAAD,CAAtC,EAAmD,UAAU,IAAI,IAAd,IAAsB,UAAU,CAAC,SAAD,CAAnF,EAAgG,KAAK,CAAC,OAAN,CAAc,IAAd,IAAsB,IAAI,CAAC,MAAL,CAAY,OAAZ,EAAqB,GAArB,CAA0B,IAAD,IAAW,WAAU,IAAK,IAAG,SAAU,EAAhE,EAAmE,IAAnE,CAAwE,GAAxE,CAAtB,GAAqG,IAAI,GAAI,WAAU,IAAK,IAAG,SAAU,EAAhC,GAAoC,IAA7O,CAAnB;AACA,WAAO,GAAP;AACD,GAHM,EAGJ,EAHI,CAAP;AAIF","sourcesContent":["import { useMantineProviderStyles } from '../../../theme/MantineProvider';\n\ninterface Input<T extends Record<string, string>> {\n  cx(...classNames: any): string;\n  classes: T;\n  context: ReturnType<typeof useMantineProviderStyles>;\n  classNames: Partial<T>;\n  name: string | string[];\n}\n\nexport function mergeClassNames<T extends Record<string, string>>({\n  cx,\n  classes,\n  context,\n  classNames,\n  name,\n}: Input<T>) {\n  const contextClassNames = context.reduce<Record<string, string>>((acc, item) => {\n    Object.keys(item.classNames).forEach((key) => {\n      if (typeof acc[key] !== 'string') {\n        acc[key] = `${item.classNames[key]}`;\n      } else {\n        acc[key] = `${acc[key]} ${item.classNames[key]}`;\n      }\n    });\n\n    return acc;\n  }, {});\n\n  return Object.keys(classes).reduce((acc, className) => {\n    acc[className] = cx(\n      classes[className],\n      contextClassNames[className],\n      classNames != null && classNames[className],\n      Array.isArray(name)\n        ? name\n            .filter(Boolean)\n            .map((part) => `mantine-${part}-${className}`)\n            .join(' ')\n        : name\n        ? `mantine-${name}-${className}`\n        : null\n    );\n    return acc;\n  }, {}) as T;\n}\n"]},"metadata":{},"sourceType":"module"}