{"ast":null,"code":"import { useState, useCallback } from 'react';\nimport { useDelayGroupContext, useFloating, offset, shift, flip, useInteractions, useHover, useFocus, useRole, useDismiss, useDelayGroup } from '@floating-ui/react-dom-interactions';\nimport { useId, useDidUpdate } from '@mantine/hooks';\nimport { useTooltipGroupContext } from './TooltipGroup/TooltipGroup.context.js';\nimport { useFloatingAutoUpdate } from '../Floating/use-floating-auto-update.js';\n\nfunction useTooltip(settings) {\n  const [uncontrolledOpened, setUncontrolledOpened] = useState(false);\n  const controlled = typeof settings.opened === \"boolean\";\n  const opened = controlled ? settings.opened : uncontrolledOpened;\n  const withinGroup = useTooltipGroupContext();\n  const uid = useId();\n  const {\n    delay: groupDelay,\n    currentId,\n    setCurrentId\n  } = useDelayGroupContext();\n  const onChange = useCallback(_opened => {\n    setUncontrolledOpened(_opened);\n\n    if (_opened) {\n      setCurrentId(uid);\n    }\n  }, [setCurrentId, uid]);\n  const {\n    x,\n    y,\n    reference,\n    floating,\n    context,\n    refs,\n    update,\n    placement\n  } = useFloating({\n    placement: settings.position,\n    open: opened,\n    onOpenChange: onChange,\n    middleware: [offset(settings.offset), shift({\n      padding: 8\n    }), flip()]\n  });\n  const {\n    getReferenceProps,\n    getFloatingProps\n  } = useInteractions([useHover(context, {\n    enabled: settings.events.hover,\n    delay: withinGroup ? groupDelay : {\n      open: settings.openDelay,\n      close: settings.closeDelay\n    },\n    mouseOnly: !settings.events.touch\n  }), useFocus(context, {\n    enabled: settings.events.focus,\n    keyboardOnly: true\n  }), useRole(context, {\n    role: \"tooltip\"\n  }), useDismiss(context, {\n    enabled: typeof settings.opened === void 0\n  }), useDelayGroup(context, {\n    id: uid\n  })]);\n  useFloatingAutoUpdate({\n    opened,\n    positionDependencies: settings.positionDependencies,\n    floating: {\n      refs,\n      update\n    }\n  });\n  useDidUpdate(() => {\n    var _a;\n\n    (_a = settings.onPositionChange) == null ? void 0 : _a.call(settings, placement);\n  }, [placement]);\n  const isGroupPhase = opened && currentId && currentId !== uid;\n  return {\n    x,\n    y,\n    reference,\n    floating,\n    getFloatingProps,\n    getReferenceProps,\n    isGroupPhase,\n    opened,\n    placement\n  };\n}\n\nexport { useTooltip };","map":{"version":3,"sources":["../../src/Tooltip/use-tooltip.ts"],"names":[],"mappings":";;;;;;AAiBO,SAAS,UAAT,CAAoB,QAApB,EAA8B;AACnC,QAAM,CAAC,kBAAD,EAAqB,qBAArB,IAA8C,QAAQ,CAAC,KAAD,CAA5D;AACA,QAAM,UAAU,GAAG,OAAO,QAAQ,CAAC,MAAhB,KAA2B,SAA9C;AACA,QAAM,MAAM,GAAG,UAAU,GAAG,QAAQ,CAAC,MAAZ,GAAqB,kBAA9C;AACA,QAAM,WAAW,GAAG,sBAAsB,EAA1C;AACA,QAAM,GAAG,GAAG,KAAK,EAAjB;AACA,QAAM;AAAE,IAAA,KAAK,EAAE,UAAT;AAAqB,IAAA,SAArB;AAAgC,IAAA;AAAhC,MAAiD,oBAAoB,EAA3E;AACA,QAAM,QAAQ,GAAG,WAAW,CAAE,OAAD,IAAa;AACxC,IAAA,qBAAqB,CAAC,OAAD,CAArB;;AACA,QAAI,OAAJ,EAAa;AACX,MAAA,YAAY,CAAC,GAAD,CAAZ;AACD;AACF,GAL2B,EAKzB,CAAC,YAAD,EAAe,GAAf,CALyB,CAA5B;AAMA,QAAM;AAAE,IAAA,CAAF;AAAK,IAAA,CAAL;AAAQ,IAAA,SAAR;AAAmB,IAAA,QAAnB;AAA6B,IAAA,OAA7B;AAAsC,IAAA,IAAtC;AAA4C,IAAA,MAA5C;AAAoD,IAAA;AAApD,MAAkE,WAAW,CAAC;AAClF,IAAA,SAAS,EAAE,QAAQ,CAAC,QAD8D;AAElF,IAAA,IAAI,EAAE,MAF4E;AAGlF,IAAA,YAAY,EAAE,QAHoE;AAIlF,IAAA,UAAU,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAV,CAAP,EAA0B,KAAK,CAAC;AAAE,MAAA,OAAO,EAAE;AAAX,KAAD,CAA/B,EAAiD,IAAI,EAArD;AAJsE,GAAD,CAAnF;AAMA,QAAM;AAAE,IAAA,iBAAF;AAAqB,IAAA;AAArB,MAA0C,eAAe,CAAC,CAC9D,QAAQ,CAAC,OAAD,EAAU;AAChB,IAAA,OAAO,EAAE,QAAQ,CAAC,MAAT,CAAgB,KADT;AAEhB,IAAA,KAAK,EAAE,WAAW,GAAG,UAAH,GAAgB;AAAE,MAAA,IAAI,EAAE,QAAQ,CAAC,SAAjB;AAA4B,MAAA,KAAK,EAAE,QAAQ,CAAC;AAA5C,KAFlB;AAGhB,IAAA,SAAS,EAAE,CAAC,QAAQ,CAAC,MAAT,CAAgB;AAHZ,GAAV,CADsD,EAM9D,QAAQ,CAAC,OAAD,EAAU;AAAE,IAAA,OAAO,EAAE,QAAQ,CAAC,MAAT,CAAgB,KAA3B;AAAkC,IAAA,YAAY,EAAE;AAAhD,GAAV,CANsD,EAO9D,OAAO,CAAC,OAAD,EAAU;AAAE,IAAA,IAAI,EAAE;AAAR,GAAV,CAPuD,EAQ9D,UAAU,CAAC,OAAD,EAAU;AAAE,IAAA,OAAO,EAAE,OAAO,QAAQ,CAAC,MAAhB,KAA2B,KAAK;AAA3C,GAAV,CARoD,EAS9D,aAAa,CAAC,OAAD,EAAU;AAAE,IAAA,EAAE,EAAE;AAAN,GAAV,CATiD,CAAD,CAA/D;AAWA,EAAA,qBAAqB,CAAC;AACpB,IAAA,MADoB;AAEpB,IAAA,oBAAoB,EAAE,QAAQ,CAAC,oBAFX;AAGpB,IAAA,QAAQ,EAAE;AAAE,MAAA,IAAF;AAAQ,MAAA;AAAR;AAHU,GAAD,CAArB;AAKA,EAAA,YAAY,CAAC,MAAM;AACjB,QAAI,EAAJ;;AACA,KAAC,EAAE,GAAG,QAAQ,CAAC,gBAAf,KAAoC,IAApC,GAA2C,KAAK,CAAhD,GAAoD,EAAE,CAAC,IAAH,CAAQ,QAAR,EAAkB,SAAlB,CAApD;AACD,GAHW,EAGT,CAAC,SAAD,CAHS,CAAZ;AAIA,QAAM,YAAY,GAAG,MAAM,IAAI,SAAV,IAAuB,SAAS,KAAK,GAA1D;AACA,SAAO;AACL,IAAA,CADK;AAEL,IAAA,CAFK;AAGL,IAAA,SAHK;AAIL,IAAA,QAJK;AAKL,IAAA,gBALK;AAML,IAAA,iBANK;AAOL,IAAA,YAPK;AAQL,IAAA,MARK;AASL,IAAA;AATK,GAAP;AAWF","sourcesContent":["import { useState, useCallback } from 'react';\nimport {\n  useFloating,\n  flip,\n  offset,\n  shift,\n  useInteractions,\n  useHover,\n  useFocus,\n  useRole,\n  useDismiss,\n  useDelayGroupContext,\n  useDelayGroup,\n} from '@floating-ui/react-dom-interactions';\nimport { useId, useDidUpdate } from '@mantine/hooks';\nimport { useTooltipGroupContext } from './TooltipGroup/TooltipGroup.context';\nimport { FloatingPosition, useFloatingAutoUpdate } from '../Floating';\n\ninterface UseTooltip {\n  position: FloatingPosition;\n  closeDelay: number;\n  openDelay: number;\n  onPositionChange?(position: FloatingPosition): void;\n  opened?: boolean;\n  offset: number;\n  events: { hover: boolean; focus: boolean; touch: boolean };\n  positionDependencies: any[];\n}\n\nexport function useTooltip(settings: UseTooltip) {\n  const [uncontrolledOpened, setUncontrolledOpened] = useState(false);\n  const controlled = typeof settings.opened === 'boolean';\n  const opened = controlled ? settings.opened : uncontrolledOpened;\n  const withinGroup = useTooltipGroupContext();\n  const uid = useId();\n\n  const { delay: groupDelay, currentId, setCurrentId } = useDelayGroupContext();\n\n  const onChange = useCallback(\n    (_opened: boolean) => {\n      setUncontrolledOpened(_opened);\n\n      if (_opened) {\n        setCurrentId(uid);\n      }\n    },\n    [setCurrentId, uid]\n  );\n\n  const { x, y, reference, floating, context, refs, update, placement } = useFloating({\n    placement: settings.position,\n    open: opened,\n    onOpenChange: onChange,\n    middleware: [offset(settings.offset), shift({ padding: 8 }), flip()],\n  });\n\n  const { getReferenceProps, getFloatingProps } = useInteractions([\n    useHover(context, {\n      enabled: settings.events.hover,\n      delay: withinGroup ? groupDelay : { open: settings.openDelay, close: settings.closeDelay },\n      mouseOnly: !settings.events.touch,\n    }),\n    useFocus(context, { enabled: settings.events.focus, keyboardOnly: true }),\n    useRole(context, { role: 'tooltip' }),\n    // cannot be used with controlled tooltip, page jumps\n    useDismiss(context, { enabled: typeof settings.opened === undefined }),\n    useDelayGroup(context, { id: uid }),\n  ]);\n\n  useFloatingAutoUpdate({\n    opened,\n    positionDependencies: settings.positionDependencies,\n    floating: { refs, update },\n  });\n\n  useDidUpdate(() => {\n    settings.onPositionChange?.(placement);\n  }, [placement]);\n\n  const isGroupPhase = opened && currentId && currentId !== uid;\n\n  return {\n    x,\n    y,\n    reference,\n    floating,\n    getFloatingProps,\n    getReferenceProps,\n    isGroupPhase,\n    opened,\n    placement,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}