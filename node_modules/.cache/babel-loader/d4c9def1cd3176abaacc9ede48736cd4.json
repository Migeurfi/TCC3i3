{"ast":null,"code":"import { useRef } from 'react';\nimport { useDidUpdate } from '../use-did-update/use-did-update.js';\n\nfunction useFocusReturn({\n  opened,\n  shouldReturnFocus = true\n}) {\n  const lastActiveElement = useRef();\n\n  const returnFocus = () => {\n    var _a;\n\n    if (lastActiveElement.current && \"focus\" in lastActiveElement.current && typeof lastActiveElement.current.focus === \"function\") {\n      (_a = lastActiveElement.current) == null ? void 0 : _a.focus();\n    }\n  };\n\n  useDidUpdate(() => {\n    let timeout = -1;\n\n    const clearFocusTimeout = event => {\n      if (event.key === \"Tab\") {\n        window.clearTimeout(timeout);\n      }\n    };\n\n    document.addEventListener(\"keydown\", clearFocusTimeout);\n\n    if (opened) {\n      lastActiveElement.current = document.activeElement;\n    } else if (shouldReturnFocus) {\n      timeout = window.setTimeout(returnFocus, 10);\n    }\n\n    return () => {\n      window.clearTimeout(timeout);\n      document.removeEventListener(\"keydown\", clearFocusTimeout);\n    };\n  }, [opened]);\n  return returnFocus;\n}\n\nexport { useFocusReturn };","map":{"version":3,"sources":["../../src/use-focus-return/use-focus-return.ts"],"names":[],"mappings":";;;AAEO,SAAS,cAAT,CAAwB;AAAE,EAAA,MAAF;AAAU,EAAA,iBAAiB,GAAG;AAA9B,CAAxB,EAA8D;AACnE,QAAM,iBAAiB,GAAG,MAAM,EAAhC;;AACA,QAAM,WAAW,GAAG,MAAM;AACxB,QAAI,EAAJ;;AACA,QAAI,iBAAiB,CAAC,OAAlB,IAA6B,WAAW,iBAAiB,CAAC,OAA1D,IAAqE,OAAO,iBAAiB,CAAC,OAAlB,CAA0B,KAAjC,KAA2C,UAApH,EAAgI;AAC9H,OAAC,EAAE,GAAG,iBAAiB,CAAC,OAAxB,KAAoC,IAApC,GAA2C,KAAK,CAAhD,GAAoD,EAAE,CAAC,KAAH,EAApD;AACD;AACF,GALD;;AAMA,EAAA,YAAY,CAAC,MAAM;AACjB,QAAI,OAAO,GAAG,CAAC,CAAf;;AACA,UAAM,iBAAiB,GAAI,KAAD,IAAW;AACnC,UAAI,KAAK,CAAC,GAAN,KAAc,KAAlB,EAAyB;AACvB,QAAA,MAAM,CAAC,YAAP,CAAoB,OAApB;AACD;AACF,KAJD;;AAKA,IAAA,QAAQ,CAAC,gBAAT,CAA0B,SAA1B,EAAqC,iBAArC;;AACA,QAAI,MAAJ,EAAY;AACV,MAAA,iBAAiB,CAAC,OAAlB,GAA4B,QAAQ,CAAC,aAArC;AACD,KAFD,MAEO,IAAI,iBAAJ,EAAuB;AAC5B,MAAA,OAAO,GAAG,MAAM,CAAC,UAAP,CAAkB,WAAlB,EAA+B,EAA/B,CAAV;AACD;;AACD,WAAO,MAAM;AACX,MAAA,MAAM,CAAC,YAAP,CAAoB,OAApB;AACA,MAAA,QAAQ,CAAC,mBAAT,CAA6B,SAA7B,EAAwC,iBAAxC;AACD,KAHD;AAID,GAjBW,EAiBT,CAAC,MAAD,CAjBS,CAAZ;AAkBA,SAAO,WAAP;AACF","sourcesContent":["import { useRef } from 'react';\nimport { useDidUpdate } from '../use-did-update/use-did-update';\n\ninterface UseFocusReturn {\n  opened: boolean;\n  shouldReturnFocus?: boolean;\n}\n\n/** Returns focus to last active element, used in Modal and Drawer */\nexport function useFocusReturn({ opened, shouldReturnFocus = true }: UseFocusReturn) {\n  const lastActiveElement = useRef<HTMLElement>();\n  const returnFocus = () => {\n    if (\n      lastActiveElement.current &&\n      'focus' in lastActiveElement.current &&\n      typeof lastActiveElement.current.focus === 'function'\n    ) {\n      lastActiveElement.current?.focus();\n    }\n  };\n\n  useDidUpdate(() => {\n    let timeout = -1;\n\n    const clearFocusTimeout = (event: KeyboardEvent) => {\n      if (event.key === 'Tab') {\n        window.clearTimeout(timeout);\n      }\n    };\n\n    document.addEventListener('keydown', clearFocusTimeout);\n\n    if (opened) {\n      lastActiveElement.current = document.activeElement as HTMLElement;\n    } else if (shouldReturnFocus) {\n      timeout = window.setTimeout(returnFocus, 10);\n    }\n\n    return () => {\n      window.clearTimeout(timeout);\n      document.removeEventListener('keydown', clearFocusTimeout);\n    };\n  }, [opened]);\n\n  return returnFocus;\n}\n"]},"metadata":{},"sourceType":"module"}