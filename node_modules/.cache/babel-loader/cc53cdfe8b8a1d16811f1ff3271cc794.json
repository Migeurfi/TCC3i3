{"ast":null,"code":"import { useState, useRef, useEffect } from 'react';\n\nfunction useDebouncedState(defaultValue, wait, options = {\n  leading: false\n}) {\n  const [value, setValue] = useState(defaultValue);\n  const timeoutRef = useRef(null);\n  const leadingRef = useRef(true);\n\n  const clearTimeout = () => window.clearTimeout(timeoutRef.current);\n\n  useEffect(() => clearTimeout, []);\n\n  const debouncedSetValue = newValue => {\n    clearTimeout();\n\n    if (leadingRef.current && options.leading) {\n      setValue(newValue);\n    } else {\n      timeoutRef.current = window.setTimeout(() => {\n        leadingRef.current = true;\n        setValue(newValue);\n      }, wait);\n    }\n\n    leadingRef.current = false;\n  };\n\n  return [value, debouncedSetValue];\n}\n\nexport { useDebouncedState };","map":{"version":3,"sources":["../../src/use-debounced-state/use-debounced-state.ts"],"names":[],"mappings":";;AACO,SAAS,iBAAT,CAA2B,YAA3B,EAAyC,IAAzC,EAA+C,OAAO,GAAG;AAAE,EAAA,OAAO,EAAE;AAAX,CAAzD,EAA6E;AAClF,QAAM,CAAC,KAAD,EAAQ,QAAR,IAAoB,QAAQ,CAAC,YAAD,CAAlC;AACA,QAAM,UAAU,GAAG,MAAM,CAAC,IAAD,CAAzB;AACA,QAAM,UAAU,GAAG,MAAM,CAAC,IAAD,CAAzB;;AACA,QAAM,YAAY,GAAG,MAAM,MAAM,CAAC,YAAP,CAAoB,UAAU,CAAC,OAA/B,CAA3B;;AACA,EAAA,SAAS,CAAC,MAAM,YAAP,EAAqB,EAArB,CAAT;;AACA,QAAM,iBAAiB,GAAI,QAAD,IAAc;AACtC,IAAA,YAAY;;AACZ,QAAI,UAAU,CAAC,OAAX,IAAsB,OAAO,CAAC,OAAlC,EAA2C;AACzC,MAAA,QAAQ,CAAC,QAAD,CAAR;AACD,KAFD,MAEO;AACL,MAAA,UAAU,CAAC,OAAX,GAAqB,MAAM,CAAC,UAAP,CAAkB,MAAM;AAC3C,QAAA,UAAU,CAAC,OAAX,GAAqB,IAArB;AACA,QAAA,QAAQ,CAAC,QAAD,CAAR;AACD,OAHoB,EAGlB,IAHkB,CAArB;AAID;;AACD,IAAA,UAAU,CAAC,OAAX,GAAqB,KAArB;AACD,GAXD;;AAYA,SAAO,CAAC,KAAD,EAAQ,iBAAR,CAAP;AACF","sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\nexport function useDebouncedState<T = any>(\n  defaultValue: T,\n  wait: number,\n  options = { leading: false }\n) {\n  const [value, setValue] = useState(defaultValue);\n  const timeoutRef = useRef<number>(null);\n  const leadingRef = useRef(true);\n\n  const clearTimeout = () => window.clearTimeout(timeoutRef.current);\n  useEffect(() => clearTimeout, []);\n\n  const debouncedSetValue = (newValue: T) => {\n    clearTimeout();\n    if (leadingRef.current && options.leading) {\n      setValue(newValue);\n    } else {\n      timeoutRef.current = window.setTimeout(() => {\n        leadingRef.current = true;\n        setValue(newValue);\n      }, wait);\n    }\n    leadingRef.current = false;\n  };\n\n  return [value, debouncedSetValue] as const;\n}\n"]},"metadata":{},"sourceType":"module"}