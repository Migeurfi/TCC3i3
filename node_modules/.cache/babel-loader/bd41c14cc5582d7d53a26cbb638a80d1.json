{"ast":null,"code":"import { cloneElement } from 'react';\nimport { isElement } from '@mantine/utils';\nimport { useFocusTrap, useMergedRef } from '@mantine/hooks';\n\nfunction FocusTrap({\n  children,\n  active = true,\n  refProp = \"ref\"\n}) {\n  const focusTrapRef = useFocusTrap(active);\n  const ref = useMergedRef(focusTrapRef, children == null ? void 0 : children.ref);\n\n  if (!isElement(children)) {\n    return children;\n  }\n\n  return cloneElement(children, {\n    [refProp]: ref\n  });\n}\n\nFocusTrap.displayName = \"@mantine/core/FocusTrap\";\nexport { FocusTrap };","map":{"version":3,"sources":["../../src/FocusTrap/FocusTrap.tsx"],"names":[],"mappings":";;;;AAGO,SAAS,SAAT,CAAmB;AACxB,EAAA,QADwB;AAExB,EAAA,MAAM,GAAG,IAFe;AAGxB,EAAA,OAAO,GAAG;AAHc,CAAnB,EAIJ;AACD,QAAM,YAAY,GAAG,YAAY,CAAC,MAAD,CAAjC;AACA,QAAM,GAAG,GAAG,YAAY,CAAC,YAAD,EAAe,QAAQ,IAAI,IAAZ,GAAmB,KAAK,CAAxB,GAA4B,QAAQ,CAAC,GAApD,CAAxB;;AACA,MAAI,CAAC,SAAS,CAAC,QAAD,CAAd,EAA0B;AACxB,WAAO,QAAP;AACD;;AACD,SAAO,YAAY,CAAC,QAAD,EAAW;AAAE,KAAC,OAAD,GAAW;AAAb,GAAX,CAAnB;AACD;;AACD,SAAS,CAAC,WAAV,GAAwB,yBAAxB","sourcesContent":["import React, { cloneElement } from 'react';\nimport { isElement } from '@mantine/utils';\nimport { useFocusTrap, useMergedRef } from '@mantine/hooks';\n\nexport interface FocusTrapProps {\n  /** Element at which focus should be trapped, should support ref prop */\n  children: any;\n\n  /** Determines whether focus should be trapped within child element */\n  active?: boolean;\n\n  /** Prop that should be used to access component ref */\n  refProp?: string;\n}\n\nexport function FocusTrap({\n  children,\n  active = true,\n  refProp = 'ref',\n}: FocusTrapProps): React.ReactElement {\n  const focusTrapRef = useFocusTrap(active);\n  const ref = useMergedRef(focusTrapRef, children?.ref);\n\n  if (!isElement(children)) {\n    return children;\n  }\n\n  return cloneElement(children, { [refProp]: ref });\n}\n\nFocusTrap.displayName = '@mantine/core/FocusTrap';\n"]},"metadata":{},"sourceType":"module"}