{"ast":null,"code":"import { useState, useCallback, useEffect } from 'react';\nimport { useWindowEvent } from '../use-window-event/use-window-event.js';\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nfunction getConnection() {\n  if (typeof navigator === \"undefined\") {\n    return {};\n  }\n\n  const _navigator = navigator;\n  const connection = _navigator.connection || _navigator.mozConnection || _navigator.webkitConnection;\n\n  if (!connection) {\n    return {};\n  }\n\n  return {\n    downlink: connection == null ? void 0 : connection.downlink,\n    downlinkMax: connection == null ? void 0 : connection.downlinkMax,\n    effectiveType: connection == null ? void 0 : connection.effectiveType,\n    rtt: connection == null ? void 0 : connection.rtt,\n    saveData: connection == null ? void 0 : connection.saveData,\n    type: connection == null ? void 0 : connection.type\n  };\n}\n\nfunction useNetwork() {\n  const [status, setStatus] = useState({\n    online: true\n  });\n  const handleConnectionChange = useCallback(() => setStatus(current => __spreadValues(__spreadValues({}, current), getConnection())), []);\n  useWindowEvent(\"online\", () => setStatus(__spreadValues({\n    online: true\n  }, getConnection())));\n  useWindowEvent(\"offline\", () => setStatus(__spreadValues({\n    online: false\n  }, getConnection())));\n  useEffect(() => {\n    if (navigator.connection) {\n      setStatus(__spreadValues({\n        online: true\n      }, getConnection()));\n      navigator.connection.addEventListener(\"change\", handleConnectionChange);\n      return () => navigator.connection.removeEventListener(\"change\", handleConnectionChange);\n    }\n\n    return void 0;\n  }, []);\n  return status;\n}\n\nexport { useNetwork };","map":{"version":3,"sources":["../../src/use-network/use-network.ts"],"names":[],"mappings":"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","sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { useWindowEvent } from '../use-window-event/use-window-event';\n\ninterface NetworkStatus {\n  downlink?: number;\n  downlinkMax?: number;\n  effectiveType?: 'slow-2g' | '2g' | '3g' | '4g';\n  rtt?: number;\n  saveData?: boolean;\n  type?: 'bluetooth' | 'cellular' | 'ethernet' | 'wifi' | 'wimax' | 'none' | 'other' | 'unknown';\n}\n\nfunction getConnection(): NetworkStatus {\n  if (typeof navigator === 'undefined') {\n    return {};\n  }\n\n  const _navigator = navigator as any;\n  const connection: any =\n    _navigator.connection || _navigator.mozConnection || _navigator.webkitConnection;\n\n  if (!connection) {\n    return {};\n  }\n\n  return {\n    downlink: connection?.downlink,\n    downlinkMax: connection?.downlinkMax,\n    effectiveType: connection?.effectiveType,\n    rtt: connection?.rtt,\n    saveData: connection?.saveData,\n    type: connection?.type,\n  };\n}\n\nexport function useNetwork() {\n  const [status, setStatus] = useState<{ online: boolean } & NetworkStatus>({\n    online: true,\n  });\n  const handleConnectionChange = useCallback(\n    () => setStatus((current) => ({ ...current, ...getConnection() })),\n    []\n  );\n\n  useWindowEvent('online', () => setStatus({ online: true, ...getConnection() }));\n  useWindowEvent('offline', () => setStatus({ online: false, ...getConnection() }));\n\n  useEffect(() => {\n    if (navigator.connection) {\n      setStatus({ online: true, ...getConnection() });\n      navigator.connection.addEventListener('change', handleConnectionChange);\n      return () => navigator.connection.removeEventListener('change', handleConnectionChange);\n    }\n\n    return undefined;\n  }, []);\n\n  return status;\n}\n"]},"metadata":{},"sourceType":"module"}