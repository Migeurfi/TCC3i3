{"ast":null,"code":"import { useState, useRef, useCallback, useEffect } from 'react';\nimport { useFloating, shift, getOverflowAncestors } from '@floating-ui/react-dom-interactions';\n\nfunction useFloatingTooltip({\n  offset,\n  position\n}) {\n  const [opened, setOpened] = useState(false);\n  const boundaryRef = useRef();\n  const {\n    x,\n    y,\n    reference,\n    floating,\n    refs,\n    update,\n    placement\n  } = useFloating({\n    placement: position,\n    middleware: [shift({\n      crossAxis: true,\n      padding: 5,\n      rootBoundary: \"document\"\n    })]\n  });\n  const horizontalOffset = placement.includes(\"right\") ? offset : position.includes(\"left\") ? offset * -1 : 0;\n  const verticalOffset = placement.includes(\"bottom\") ? offset : position.includes(\"top\") ? offset * -1 : 0;\n  const handleMouseMove = useCallback(({\n    clientX,\n    clientY\n  }) => {\n    reference({\n      getBoundingClientRect() {\n        return {\n          width: 0,\n          height: 0,\n          x: clientX,\n          y: clientY,\n          left: clientX + horizontalOffset,\n          top: clientY + verticalOffset,\n          right: clientX,\n          bottom: clientY\n        };\n      }\n\n    });\n  }, [reference]);\n  useEffect(() => {\n    if (refs.floating.current) {\n      const boundary = boundaryRef.current;\n      boundary.addEventListener(\"mousemove\", handleMouseMove);\n      const parents = getOverflowAncestors(refs.floating.current);\n      parents.forEach(parent => {\n        parent.addEventListener(\"scroll\", update);\n      });\n      return () => {\n        boundary.removeEventListener(\"mousemove\", handleMouseMove);\n        parents.forEach(parent => {\n          parent.removeEventListener(\"scroll\", update);\n        });\n      };\n    }\n\n    return void 0;\n  }, [reference, refs.floating, update, handleMouseMove, opened]);\n  return {\n    handleMouseMove,\n    x,\n    y,\n    opened,\n    setOpened,\n    boundaryRef,\n    floating\n  };\n}\n\nexport { useFloatingTooltip };","map":{"version":3,"sources":["../../../src/Tooltip/TooltipFloating/use-floating-tooltip.ts"],"names":[],"mappings":";;;AAEO,SAAS,kBAAT,CAA4B;AACjC,EAAA,MADiC;AAEjC,EAAA;AAFiC,CAA5B,EAGJ;AACD,QAAM,CAAC,MAAD,EAAS,SAAT,IAAsB,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,WAAW,GAAG,MAAM,EAA1B;AACA,QAAM;AAAE,IAAA,CAAF;AAAK,IAAA,CAAL;AAAQ,IAAA,SAAR;AAAmB,IAAA,QAAnB;AAA6B,IAAA,IAA7B;AAAmC,IAAA,MAAnC;AAA2C,IAAA;AAA3C,MAAyD,WAAW,CAAC;AACzE,IAAA,SAAS,EAAE,QAD8D;AAEzE,IAAA,UAAU,EAAE,CACV,KAAK,CAAC;AACJ,MAAA,SAAS,EAAE,IADP;AAEJ,MAAA,OAAO,EAAE,CAFL;AAGJ,MAAA,YAAY,EAAE;AAHV,KAAD,CADK;AAF6D,GAAD,CAA1E;AAUA,QAAM,gBAAgB,GAAG,SAAS,CAAC,QAAV,CAAmB,OAAnB,IAA8B,MAA9B,GAAuC,QAAQ,CAAC,QAAT,CAAkB,MAAlB,IAA4B,MAAM,GAAG,CAAC,CAAtC,GAA0C,CAA1G;AACA,QAAM,cAAc,GAAG,SAAS,CAAC,QAAV,CAAmB,QAAnB,IAA+B,MAA/B,GAAwC,QAAQ,CAAC,QAAT,CAAkB,KAAlB,IAA2B,MAAM,GAAG,CAAC,CAArC,GAAyC,CAAxG;AACA,QAAM,eAAe,GAAG,WAAW,CAAC,CAAC;AAAE,IAAA,OAAF;AAAW,IAAA;AAAX,GAAD,KAA0B;AAC5D,IAAA,SAAS,CAAC;AACR,MAAA,qBAAqB,GAAG;AACtB,eAAO;AACL,UAAA,KAAK,EAAE,CADF;AAEL,UAAA,MAAM,EAAE,CAFH;AAGL,UAAA,CAAC,EAAE,OAHE;AAIL,UAAA,CAAC,EAAE,OAJE;AAKL,UAAA,IAAI,EAAE,OAAO,GAAG,gBALX;AAML,UAAA,GAAG,EAAE,OAAO,GAAG,cANV;AAOL,UAAA,KAAK,EAAE,OAPF;AAQL,UAAA,MAAM,EAAE;AARH,SAAP;AAUD;;AAZO,KAAD,CAAT;AAcD,GAfkC,EAehC,CAAC,SAAD,CAfgC,CAAnC;AAgBA,EAAA,SAAS,CAAC,MAAM;AACd,QAAI,IAAI,CAAC,QAAL,CAAc,OAAlB,EAA2B;AACzB,YAAM,QAAQ,GAAG,WAAW,CAAC,OAA7B;AACA,MAAA,QAAQ,CAAC,gBAAT,CAA0B,WAA1B,EAAuC,eAAvC;AACA,YAAM,OAAO,GAAG,oBAAoB,CAAC,IAAI,CAAC,QAAL,CAAc,OAAf,CAApC;AACA,MAAA,OAAO,CAAC,OAAR,CAAiB,MAAD,IAAY;AAC1B,QAAA,MAAM,CAAC,gBAAP,CAAwB,QAAxB,EAAkC,MAAlC;AACD,OAFD;AAGA,aAAO,MAAM;AACX,QAAA,QAAQ,CAAC,mBAAT,CAA6B,WAA7B,EAA0C,eAA1C;AACA,QAAA,OAAO,CAAC,OAAR,CAAiB,MAAD,IAAY;AAC1B,UAAA,MAAM,CAAC,mBAAP,CAA2B,QAA3B,EAAqC,MAArC;AACD,SAFD;AAGD,OALD;AAMD;;AACD,WAAO,KAAK,CAAZ;AACD,GAhBQ,EAgBN,CAAC,SAAD,EAAY,IAAI,CAAC,QAAjB,EAA2B,MAA3B,EAAmC,eAAnC,EAAoD,MAApD,CAhBM,CAAT;AAiBA,SAAO;AAAE,IAAA,eAAF;AAAmB,IAAA,CAAnB;AAAsB,IAAA,CAAtB;AAAyB,IAAA,MAAzB;AAAiC,IAAA,SAAjC;AAA4C,IAAA,WAA5C;AAAyD,IAAA;AAAzD,GAAP;AACF","sourcesContent":["import { useState, useEffect, useCallback, useRef } from 'react';\nimport { useFloating, shift, getOverflowAncestors } from '@floating-ui/react-dom-interactions';\nimport { FloatingPosition } from '../../Floating';\n\ninterface UseFloatingTooltip {\n  offset: number;\n  position: FloatingPosition;\n}\n\nexport function useFloatingTooltip<T extends HTMLElement = any>({\n  offset,\n  position,\n}: UseFloatingTooltip) {\n  const [opened, setOpened] = useState(false);\n  const boundaryRef = useRef<T>();\n  const { x, y, reference, floating, refs, update, placement } = useFloating({\n    placement: position,\n    middleware: [\n      shift({\n        crossAxis: true,\n        padding: 5,\n        rootBoundary: 'document',\n      }),\n    ],\n  });\n\n  const horizontalOffset = placement.includes('right')\n    ? offset\n    : position.includes('left')\n    ? offset * -1\n    : 0;\n\n  const verticalOffset = placement.includes('bottom')\n    ? offset\n    : position.includes('top')\n    ? offset * -1\n    : 0;\n\n  const handleMouseMove = useCallback(\n    ({ clientX, clientY }: MouseEvent | React.MouseEvent<T, MouseEvent>) => {\n      reference({\n        getBoundingClientRect() {\n          return {\n            width: 0,\n            height: 0,\n            x: clientX,\n            y: clientY,\n            left: clientX + horizontalOffset,\n            top: clientY + verticalOffset,\n            right: clientX,\n            bottom: clientY,\n          };\n        },\n      });\n    },\n    [reference]\n  );\n\n  useEffect(() => {\n    if (refs.floating.current) {\n      const boundary = boundaryRef.current;\n      boundary.addEventListener('mousemove', handleMouseMove);\n\n      const parents = getOverflowAncestors(refs.floating.current);\n      parents.forEach((parent) => {\n        parent.addEventListener('scroll', update);\n      });\n\n      return () => {\n        boundary.removeEventListener('mousemove', handleMouseMove);\n        parents.forEach((parent) => {\n          parent.removeEventListener('scroll', update);\n        });\n      };\n    }\n\n    return undefined;\n  }, [reference, refs.floating, update, handleMouseMove, opened]);\n\n  return { handleMouseMove, x, y, opened, setOpened, boundaryRef, floating };\n}\n"]},"metadata":{},"sourceType":"module"}