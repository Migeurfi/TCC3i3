{"ast":null,"code":"import React from 'react';\nimport { getSafeId } from '@mantine/utils';\nimport { useId, useUncontrolled } from '@mantine/hooks';\nimport { AccordionContextProvider } from './Accordion.context.js';\nimport { ACCORDION_ERRORS } from './Accordion.errors.js';\n\nfunction AccordionProvider({\n  children,\n  multiple,\n  value,\n  defaultValue,\n  onChange,\n  id,\n  loop,\n  transitionDuration,\n  disableChevronRotation,\n  chevronPosition,\n  chevronSize,\n  order,\n  chevron,\n  variant,\n  radius\n}) {\n  const uid = useId(id);\n  const [_value, handleChange] = useUncontrolled({\n    value,\n    defaultValue,\n    finalValue: multiple ? [] : null,\n    onChange\n  });\n\n  const isItemActive = itemValue => Array.isArray(_value) ? _value.includes(itemValue) : itemValue === _value;\n\n  const handleItemChange = itemValue => {\n    const nextValue = Array.isArray(_value) ? _value.includes(itemValue) ? _value.filter(selectedValue => selectedValue !== itemValue) : [..._value, itemValue] : itemValue === _value ? null : itemValue;\n    handleChange(nextValue);\n  };\n\n  return /* @__PURE__ */React.createElement(AccordionContextProvider, {\n    value: {\n      isItemActive,\n      onChange: handleItemChange,\n      getControlId: getSafeId(`${uid}-control`, ACCORDION_ERRORS.value),\n      getRegionId: getSafeId(`${uid}-panel`, ACCORDION_ERRORS.value),\n      transitionDuration,\n      disableChevronRotation,\n      chevronPosition,\n      chevronSize,\n      order,\n      chevron,\n      loop,\n      variant,\n      radius\n    }\n  }, children);\n}\n\nexport { AccordionProvider };","map":{"version":3,"sources":["../../src/Accordion/AccordionProvider.tsx"],"names":[],"mappings":";;;;;;AAKO,SAAS,iBAAT,CAA2B;AAChC,EAAA,QADgC;AAEhC,EAAA,QAFgC;AAGhC,EAAA,KAHgC;AAIhC,EAAA,YAJgC;AAKhC,EAAA,QALgC;AAMhC,EAAA,EANgC;AAOhC,EAAA,IAPgC;AAQhC,EAAA,kBARgC;AAShC,EAAA,sBATgC;AAUhC,EAAA,eAVgC;AAWhC,EAAA,WAXgC;AAYhC,EAAA,KAZgC;AAahC,EAAA,OAbgC;AAchC,EAAA,OAdgC;AAehC,EAAA;AAfgC,CAA3B,EAgBJ;AACD,QAAM,GAAG,GAAG,KAAK,CAAC,EAAD,CAAjB;AACA,QAAM,CAAC,MAAD,EAAS,YAAT,IAAyB,eAAe,CAAC;AAC7C,IAAA,KAD6C;AAE7C,IAAA,YAF6C;AAG7C,IAAA,UAAU,EAAE,QAAQ,GAAG,EAAH,GAAQ,IAHiB;AAI7C,IAAA;AAJ6C,GAAD,CAA9C;;AAMA,QAAM,YAAY,GAAI,SAAD,IAAe,KAAK,CAAC,OAAN,CAAc,MAAd,IAAwB,MAAM,CAAC,QAAP,CAAgB,SAAhB,CAAxB,GAAqD,SAAS,KAAK,MAAvG;;AACA,QAAM,gBAAgB,GAAI,SAAD,IAAe;AACtC,UAAM,SAAS,GAAG,KAAK,CAAC,OAAN,CAAc,MAAd,IAAwB,MAAM,CAAC,QAAP,CAAgB,SAAhB,IAA6B,MAAM,CAAC,MAAP,CAAe,aAAD,IAAmB,aAAa,KAAK,SAAnD,CAA7B,GAA6F,CAAC,GAAG,MAAJ,EAAY,SAAZ,CAArH,GAA8I,SAAS,KAAK,MAAd,GAAuB,IAAvB,GAA8B,SAA9L;AACA,IAAA,YAAY,CAAC,SAAD,CAAZ;AACD,GAHD;;AAIA,SAAA,eAAuB,KAAK,CAAC,aAAN,CAAoB,wBAApB,EAA8C;AACnE,IAAA,KAAK,EAAE;AACL,MAAA,YADK;AAEL,MAAA,QAAQ,EAAE,gBAFL;AAGL,MAAA,YAAY,EAAE,SAAS,CAAE,GAAE,GAAI,UAAR,EAAmB,gBAAgB,CAAC,KAApC,CAHlB;AAIL,MAAA,WAAW,EAAE,SAAS,CAAE,GAAE,GAAI,QAAR,EAAiB,gBAAgB,CAAC,KAAlC,CAJjB;AAKL,MAAA,kBALK;AAML,MAAA,sBANK;AAOL,MAAA,eAPK;AAQL,MAAA,WARK;AASL,MAAA,KATK;AAUL,MAAA,OAVK;AAWL,MAAA,IAXK;AAYL,MAAA,OAZK;AAaL,MAAA;AAbK;AAD4D,GAA9C,EAgBpB,QAhBoB,CAAvB;AAiBF","sourcesContent":["import React from 'react';\nimport { getSafeId } from '@mantine/utils';\nimport { useUncontrolled, useId } from '@mantine/hooks';\nimport { MantineNumberSize } from '@mantine/styles';\nimport { AccordionContextProvider } from './Accordion.context';\nimport {\n  AccordionValue,\n  AccordionChevronPosition,\n  AccordionHeadingOrder,\n  AccordionVariant,\n} from './Accordion.types';\nimport { ACCORDION_ERRORS } from './Accordion.errors';\n\nexport interface AccordionProviderProps<Multiple extends boolean = false> {\n  /** Base id, used to generate ids that connect labels with controls, by default generated randomly */\n  id?: string;\n\n  /** Determines whether arrow key presses should loop though items (first to last and last to first) */\n  loop?: boolean;\n\n  /** Accordion content */\n  children: React.ReactNode;\n\n  /** Determines whether multiple items can be opened at a time */\n  multiple?: Multiple;\n\n  /** Value for controlled component */\n  value?: AccordionValue<Multiple>;\n\n  /** Default value for uncontrolled component */\n  defaultValue?: AccordionValue<Multiple>;\n\n  /** Callback for controlled component */\n  onChange?(value: AccordionValue<Multiple>): void;\n\n  /** Transition duration in ms, set 0 to disable transitions */\n  transitionDuration?: number;\n\n  /** Determines whether chevron rotation should be disabled */\n  disableChevronRotation?: boolean;\n\n  /** Determines position of the chevron */\n  chevronPosition?: AccordionChevronPosition;\n\n  /** Chevron size in px */\n  chevronSize?: number;\n\n  /** Heading order, has no effect on visuals */\n  order?: AccordionHeadingOrder;\n\n  /** Replaces chevron on all items */\n  chevron?: React.ReactNode;\n\n  /** Controls visuals */\n  variant?: AccordionVariant;\n\n  /** border-radius from theme.radius or number to set value in px, will not be applied to default variant  */\n  radius?: MantineNumberSize;\n}\n\nexport function AccordionProvider<Multiple extends boolean = false>({\n  children,\n  multiple,\n  value,\n  defaultValue,\n  onChange,\n  id,\n  loop,\n  transitionDuration,\n  disableChevronRotation,\n  chevronPosition,\n  chevronSize,\n  order,\n  chevron,\n  variant,\n  radius,\n}: AccordionProviderProps<Multiple>) {\n  const uid = useId(id);\n  const [_value, handleChange] = useUncontrolled({\n    value,\n    defaultValue,\n    finalValue: multiple ? ([] as any) : null,\n    onChange,\n  });\n\n  const isItemActive = (itemValue: string) =>\n    Array.isArray(_value) ? _value.includes(itemValue) : itemValue === _value;\n\n  const handleItemChange = (itemValue: string) => {\n    const nextValue: AccordionValue<Multiple> = Array.isArray(_value)\n      ? _value.includes(itemValue)\n        ? _value.filter((selectedValue) => selectedValue !== itemValue)\n        : [..._value, itemValue]\n      : itemValue === _value\n      ? null\n      : (itemValue as any);\n\n    handleChange(nextValue);\n  };\n\n  return (\n    <AccordionContextProvider\n      value={{\n        isItemActive,\n        onChange: handleItemChange,\n        getControlId: getSafeId(`${uid}-control`, ACCORDION_ERRORS.value),\n        getRegionId: getSafeId(`${uid}-panel`, ACCORDION_ERRORS.value),\n        transitionDuration,\n        disableChevronRotation,\n        chevronPosition,\n        chevronSize,\n        order,\n        chevron,\n        loop,\n        variant,\n        radius,\n      }}\n    >\n      {children}\n    </AccordionContextProvider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}