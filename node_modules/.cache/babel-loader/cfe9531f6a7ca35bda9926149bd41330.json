{"ast":null,"code":"import { useRef, useState, useEffect } from 'react';\n\nfunction containsRelatedTarget(event) {\n  if (event.currentTarget instanceof HTMLElement && event.relatedTarget instanceof HTMLElement) {\n    return event.currentTarget.contains(event.relatedTarget);\n  }\n\n  return false;\n}\n\nfunction useFocusWithin({\n  onBlur,\n  onFocus\n} = {}) {\n  const ref = useRef();\n  const [focused, _setFocused] = useState(false);\n  const focusedRef = useRef(false);\n\n  const setFocused = value => {\n    _setFocused(value);\n\n    focusedRef.current = value;\n  };\n\n  const handleFocusIn = event => {\n    if (!focusedRef.current) {\n      setFocused(true);\n      onFocus == null ? void 0 : onFocus(event);\n    }\n  };\n\n  const handleFocusOut = event => {\n    if (focusedRef.current && !containsRelatedTarget(event)) {\n      setFocused(false);\n      onBlur == null ? void 0 : onBlur(event);\n    }\n  };\n\n  useEffect(() => {\n    if (ref.current) {\n      ref.current.addEventListener(\"focusin\", handleFocusIn);\n      ref.current.addEventListener(\"focusout\", handleFocusOut);\n      return () => {\n        var _a, _b;\n\n        (_a = ref.current) == null ? void 0 : _a.removeEventListener(\"focusin\", handleFocusIn);\n        (_b = ref.current) == null ? void 0 : _b.removeEventListener(\"focusout\", handleFocusOut);\n      };\n    }\n\n    return void 0;\n  }, []);\n  return {\n    ref,\n    focused\n  };\n}\n\nexport { useFocusWithin };","map":{"version":3,"sources":["../../src/use-focus-within/use-focus-within.ts"],"names":[],"mappings":";;AACA,SAAS,qBAAT,CAA+B,KAA/B,EAAsC;AACpC,MAAI,KAAK,CAAC,aAAN,YAA+B,WAA/B,IAA8C,KAAK,CAAC,aAAN,YAA+B,WAAjF,EAA8F;AAC5F,WAAO,KAAK,CAAC,aAAN,CAAoB,QAApB,CAA6B,KAAK,CAAC,aAAnC,CAAP;AACD;;AACD,SAAO,KAAP;AACD;;AACM,SAAS,cAAT,CAAwB;AAC7B,EAAA,MAD6B;AAE7B,EAAA;AAF6B,IAG3B,EAHG,EAGC;AACN,QAAM,GAAG,GAAG,MAAM,EAAlB;AACA,QAAM,CAAC,OAAD,EAAU,WAAV,IAAyB,QAAQ,CAAC,KAAD,CAAvC;AACA,QAAM,UAAU,GAAG,MAAM,CAAC,KAAD,CAAzB;;AACA,QAAM,UAAU,GAAI,KAAD,IAAW;AAC5B,IAAA,WAAW,CAAC,KAAD,CAAX;;AACA,IAAA,UAAU,CAAC,OAAX,GAAqB,KAArB;AACD,GAHD;;AAIA,QAAM,aAAa,GAAI,KAAD,IAAW;AAC/B,QAAI,CAAC,UAAU,CAAC,OAAhB,EAAyB;AACvB,MAAA,UAAU,CAAC,IAAD,CAAV;AACA,MAAA,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2B,OAAO,CAAC,KAAD,CAAlC;AACD;AACF,GALD;;AAMA,QAAM,cAAc,GAAI,KAAD,IAAW;AAChC,QAAI,UAAU,CAAC,OAAX,IAAsB,CAAC,qBAAqB,CAAC,KAAD,CAAhD,EAAyD;AACvD,MAAA,UAAU,CAAC,KAAD,CAAV;AACA,MAAA,MAAM,IAAI,IAAV,GAAiB,KAAK,CAAtB,GAA0B,MAAM,CAAC,KAAD,CAAhC;AACD;AACF,GALD;;AAMA,EAAA,SAAS,CAAC,MAAM;AACd,QAAI,GAAG,CAAC,OAAR,EAAiB;AACf,MAAA,GAAG,CAAC,OAAJ,CAAY,gBAAZ,CAA6B,SAA7B,EAAwC,aAAxC;AACA,MAAA,GAAG,CAAC,OAAJ,CAAY,gBAAZ,CAA6B,UAA7B,EAAyC,cAAzC;AACA,aAAO,MAAM;AACX,YAAI,EAAJ,EAAQ,EAAR;;AACA,SAAC,EAAE,GAAG,GAAG,CAAC,OAAV,KAAsB,IAAtB,GAA6B,KAAK,CAAlC,GAAsC,EAAE,CAAC,mBAAH,CAAuB,SAAvB,EAAkC,aAAlC,CAAtC;AACA,SAAC,EAAE,GAAG,GAAG,CAAC,OAAV,KAAsB,IAAtB,GAA6B,KAAK,CAAlC,GAAsC,EAAE,CAAC,mBAAH,CAAuB,UAAvB,EAAmC,cAAnC,CAAtC;AACD,OAJD;AAKD;;AACD,WAAO,KAAK,CAAZ;AACD,GAXQ,EAWN,EAXM,CAAT;AAYA,SAAO;AAAE,IAAA,GAAF;AAAO,IAAA;AAAP,GAAP;AACF","sourcesContent":["import { useRef, useState, useEffect } from 'react';\n\nexport interface UseFocusWithinOptions {\n  onFocus?(event: FocusEvent): void;\n  onBlur?(event: FocusEvent): void;\n}\n\nfunction containsRelatedTarget(event: FocusEvent) {\n  if (event.currentTarget instanceof HTMLElement && event.relatedTarget instanceof HTMLElement) {\n    return event.currentTarget.contains(event.relatedTarget);\n  }\n\n  return false;\n}\n\nexport function useFocusWithin<T extends HTMLElement = any>({\n  onBlur,\n  onFocus,\n}: UseFocusWithinOptions = {}): { ref: React.MutableRefObject<T>; focused: boolean } {\n  const ref = useRef<T>();\n  const [focused, _setFocused] = useState(false);\n  const focusedRef = useRef(false);\n  const setFocused = (value: boolean) => {\n    _setFocused(value);\n    focusedRef.current = value;\n  };\n\n  const handleFocusIn = (event: FocusEvent) => {\n    if (!focusedRef.current) {\n      setFocused(true);\n      onFocus?.(event);\n    }\n  };\n\n  const handleFocusOut = (event: FocusEvent) => {\n    if (focusedRef.current && !containsRelatedTarget(event)) {\n      setFocused(false);\n      onBlur?.(event);\n    }\n  };\n\n  useEffect(() => {\n    if (ref.current) {\n      ref.current.addEventListener('focusin', handleFocusIn);\n      ref.current.addEventListener('focusout', handleFocusOut);\n\n      return () => {\n        ref.current?.removeEventListener('focusin', handleFocusIn);\n        ref.current?.removeEventListener('focusout', handleFocusOut);\n      };\n    }\n\n    return undefined;\n  }, []);\n\n  return { ref, focused };\n}\n"]},"metadata":{},"sourceType":"module"}