{"ast":null,"code":"import { useCallback } from 'react';\nimport { assignRef } from '../utils/assign-ref/assign-ref.js';\n\nfunction mergeRefs(...refs) {\n  return node => {\n    refs.forEach(ref => assignRef(ref, node));\n  };\n}\n\nfunction useMergedRef(...refs) {\n  return useCallback(mergeRefs(...refs), refs);\n}\n\nexport { mergeRefs, useMergedRef };","map":{"version":3,"sources":["../../src/use-merged-ref/use-merged-ref.ts"],"names":[],"mappings":";;;AAEO,SAAS,SAAT,CAAmB,GAAG,IAAtB,EAA4B;AACjC,SAAQ,IAAD,IAAU;AACf,IAAA,IAAI,CAAC,OAAL,CAAc,GAAD,IAAS,SAAS,CAAC,GAAD,EAAM,IAAN,CAA/B;AACD,GAFD;AAGD;;AACM,SAAS,YAAT,CAAsB,GAAG,IAAzB,EAA+B;AACpC,SAAO,WAAW,CAAC,SAAS,CAAC,GAAG,IAAJ,CAAV,EAAqB,IAArB,CAAlB;AACF","sourcesContent":["import React, { useCallback } from 'react';\nimport { assignRef } from '../utils';\n\ntype Ref<T> = React.Dispatch<React.SetStateAction<T>> | React.ForwardedRef<T>;\n\nexport function mergeRefs<T = any>(...refs: Ref<T>[]) {\n  return (node: T | null) => {\n    refs.forEach((ref) => assignRef(ref, node));\n  };\n}\n\nexport function useMergedRef<T = any>(...refs: Ref<T>[]) {\n  return useCallback(mergeRefs(...refs), refs);\n}\n"]},"metadata":{},"sourceType":"module"}