{"ast":null,"code":"import { useState } from 'react';\n\nfunction useValidatedState(initialValue, validation, initialValidationState) {\n  const [value, setValue] = useState(initialValue);\n  const [lastValidValue, setLastValidValue] = useState(validation(initialValue) ? initialValue : void 0);\n  const [valid, setValid] = useState(typeof initialValidationState === \"boolean\" ? initialValidationState : validation(initialValue));\n\n  const onChange = val => {\n    if (validation(val)) {\n      setLastValidValue(val);\n      setValid(true);\n    } else {\n      setValid(false);\n    }\n\n    setValue(val);\n  };\n\n  return [{\n    value,\n    lastValidValue,\n    valid\n  }, onChange];\n}\n\nexport { useValidatedState };","map":{"version":3,"sources":["../../src/use-validated-state/use-validated-state.ts"],"names":[],"mappings":";;AACO,SAAS,iBAAT,CAA2B,YAA3B,EAAyC,UAAzC,EAAqD,sBAArD,EAA6E;AAClF,QAAM,CAAC,KAAD,EAAQ,QAAR,IAAoB,QAAQ,CAAC,YAAD,CAAlC;AACA,QAAM,CAAC,cAAD,EAAiB,iBAAjB,IAAsC,QAAQ,CAAC,UAAU,CAAC,YAAD,CAAV,GAA2B,YAA3B,GAA0C,KAAK,CAAhD,CAApD;AACA,QAAM,CAAC,KAAD,EAAQ,QAAR,IAAoB,QAAQ,CAAC,OAAO,sBAAP,KAAkC,SAAlC,GAA8C,sBAA9C,GAAuE,UAAU,CAAC,YAAD,CAAlF,CAAlC;;AACA,QAAM,QAAQ,GAAI,GAAD,IAAS;AACxB,QAAI,UAAU,CAAC,GAAD,CAAd,EAAqB;AACnB,MAAA,iBAAiB,CAAC,GAAD,CAAjB;AACA,MAAA,QAAQ,CAAC,IAAD,CAAR;AACD,KAHD,MAGO;AACL,MAAA,QAAQ,CAAC,KAAD,CAAR;AACD;;AACD,IAAA,QAAQ,CAAC,GAAD,CAAR;AACD,GARD;;AASA,SAAO,CAAC;AAAE,IAAA,KAAF;AAAS,IAAA,cAAT;AAAyB,IAAA;AAAzB,GAAD,EAAmC,QAAnC,CAAP;AACF","sourcesContent":["import { useState } from 'react';\n\nexport function useValidatedState<T>(\n  initialValue: T,\n  validation: (value: T) => boolean,\n  initialValidationState?: boolean\n) {\n  const [value, setValue] = useState<T>(initialValue);\n  const [lastValidValue, setLastValidValue] = useState<T>(\n    validation(initialValue) ? initialValue : undefined\n  );\n  const [valid, setValid] = useState<boolean>(\n    typeof initialValidationState === 'boolean' ? initialValidationState : validation(initialValue)\n  );\n\n  const onChange = (val: T) => {\n    if (validation(val)) {\n      setLastValidValue(val);\n      setValid(true);\n    } else {\n      setValid(false);\n    }\n\n    setValue(val);\n  };\n\n  return [{ value, lastValidValue, valid }, onChange] as const;\n}\n"]},"metadata":{},"sourceType":"module"}