{"ast":null,"code":"import { useState } from 'react';\nimport { clamp } from '../utils/clamp/clamp.js';\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nconst DEFAULT_OPTIONS = {\n  min: -Infinity,\n  max: Infinity\n};\n\nfunction useCounter(initialValue = 0, options) {\n  const {\n    min,\n    max\n  } = __spreadValues(__spreadValues({}, DEFAULT_OPTIONS), options);\n\n  const [count, setCount] = useState(clamp(initialValue, min, max));\n\n  const increment = () => setCount(current => clamp(current + 1, min, max));\n\n  const decrement = () => setCount(current => clamp(current - 1, min, max));\n\n  const set = value => setCount(clamp(value, min, max));\n\n  const reset = () => setCount(clamp(initialValue, min, max));\n\n  return [count, {\n    increment,\n    decrement,\n    set,\n    reset\n  }];\n}\n\nexport { useCounter };","map":{"version":3,"sources":["../../src/use-counter/use-counter.ts"],"names":[],"mappings":";;AAAA,IAAI,SAAS,GAAG,MAAM,CAAC,cAAvB;AACA,IAAI,mBAAmB,GAAG,MAAM,CAAC,qBAAjC;AACA,IAAI,YAAY,GAAG,MAAM,CAAC,SAAP,CAAiB,cAApC;AACA,IAAI,YAAY,GAAG,MAAM,CAAC,SAAP,CAAiB,oBAApC;;AACA,IAAI,eAAe,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,KAAX,KAAqB,GAAG,IAAI,GAAP,GAAa,SAAS,CAAC,GAAD,EAAM,GAAN,EAAW;AAAE,EAAA,UAAU,EAAE,IAAd;AAAoB,EAAA,YAAY,EAAE,IAAlC;AAAwC,EAAA,QAAQ,EAAE,IAAlD;AAAwD,EAAA;AAAxD,CAAX,CAAtB,GAAoG,GAAG,CAAC,GAAD,CAAH,GAAW,KAA1J;;AACA,IAAI,cAAc,GAAG,CAAC,CAAD,EAAI,CAAJ,KAAU;AAC7B,OAAK,IAAI,IAAT,IAAiB,CAAC,KAAK,CAAC,GAAG,EAAT,CAAlB,EACE,IAAI,YAAY,CAAC,IAAb,CAAkB,CAAlB,EAAqB,IAArB,CAAJ,EACE,eAAe,CAAC,CAAD,EAAI,IAAJ,EAAU,CAAC,CAAC,IAAD,CAAX,CAAf;;AACJ,MAAI,mBAAJ,EACE,KAAK,IAAI,IAAT,IAAiB,mBAAmB,CAAC,CAAD,CAApC,EAAyC;AACvC,QAAI,YAAY,CAAC,IAAb,CAAkB,CAAlB,EAAqB,IAArB,CAAJ,EACE,eAAe,CAAC,CAAD,EAAI,IAAJ,EAAU,CAAC,CAAC,IAAD,CAAX,CAAf;AACH;AACH,SAAO,CAAP;AACD,CAVD;;AAaA,MAAM,eAAe,GAAG;AACtB,EAAA,GAAG,EAAE,CAAC,QADgB;AAEtB,EAAA,GAAG,EAAE;AAFiB,CAAxB;;AAIO,SAAS,UAAT,CAAoB,YAAY,GAAG,CAAnC,EAAsC,OAAtC,EAA+C;AACpD,QAAM;AAAE,IAAA,GAAF;AAAO,IAAA;AAAP,MAAe,cAAc,CAAC,cAAc,CAAC,EAAD,EAAK,eAAL,CAAf,EAAsC,OAAtC,CAAnC;;AACA,QAAM,CAAC,KAAD,EAAQ,QAAR,IAAoB,QAAQ,CAAC,KAAK,CAAC,YAAD,EAAe,GAAf,EAAoB,GAApB,CAAN,CAAlC;;AACA,QAAM,SAAS,GAAG,MAAM,QAAQ,CAAE,OAAD,IAAa,KAAK,CAAC,OAAO,GAAG,CAAX,EAAc,GAAd,EAAmB,GAAnB,CAAnB,CAAhC;;AACA,QAAM,SAAS,GAAG,MAAM,QAAQ,CAAE,OAAD,IAAa,KAAK,CAAC,OAAO,GAAG,CAAX,EAAc,GAAd,EAAmB,GAAnB,CAAnB,CAAhC;;AACA,QAAM,GAAG,GAAI,KAAD,IAAW,QAAQ,CAAC,KAAK,CAAC,KAAD,EAAQ,GAAR,EAAa,GAAb,CAAN,CAA/B;;AACA,QAAM,KAAK,GAAG,MAAM,QAAQ,CAAC,KAAK,CAAC,YAAD,EAAe,GAAf,EAAoB,GAApB,CAAN,CAA5B;;AACA,SAAO,CAAC,KAAD,EAAQ;AAAE,IAAA,SAAF;AAAa,IAAA,SAAb;AAAwB,IAAA,GAAxB;AAA6B,IAAA;AAA7B,GAAR,CAAP;AACF","sourcesContent":["import { useState } from 'react';\nimport { clamp } from '../utils';\n\nconst DEFAULT_OPTIONS = {\n  min: -Infinity,\n  max: Infinity,\n};\n\nexport function useCounter(initialValue = 0, options?: Partial<{ min: number; max: number }>) {\n  const { min, max } = { ...DEFAULT_OPTIONS, ...options };\n  const [count, setCount] = useState<number>(clamp(initialValue, min, max));\n\n  const increment = () => setCount((current) => clamp(current + 1, min, max));\n  const decrement = () => setCount((current) => clamp(current - 1, min, max));\n  const set = (value: number) => setCount(clamp(value, min, max));\n  const reset = () => setCount(clamp(initialValue, min, max));\n\n  return [count, { increment, decrement, set, reset }] as const;\n}\n"]},"metadata":{},"sourceType":"module"}